/*
 * generated by Xtext
 */
package com.ms.qaTools.saturn;

import org.eclipse.xtext.conversion.impl.AbstractIDValueConverter;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import com.google.inject.Binder;
import com.google.inject.name.Names;
import com.ms.qaTools.saturn.scoping.KronusLocalScopeProvider;
import com.ms.qaTools.saturn.scoping.KronusScopeProvider;
import com.ms.qaTools.saturn.services.KronusIDValueConverter;
import com.ms.qaTools.saturn.services.KronusQualifiedNameProvider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class KronusRuntimeModule extends com.ms.qaTools.saturn.AbstractKronusRuntimeModule {
    public Class<? extends AbstractIDValueConverter> bindAbstractIDValueConverter() {
        return KronusIDValueConverter.class;
    }

    @Override
    public Class<? extends IScopeProvider> bindIScopeProvider() {
        return KronusScopeProvider.class;
    }

    @Override
    public void configureIScopeProviderDelegate(Binder binder) {
        binder.bind(IScopeProvider.class)
              .annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
              .to(KronusLocalScopeProvider.class);
    }

    @Override
    public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
        return KronusQualifiedNameProvider.class;
    }
}
