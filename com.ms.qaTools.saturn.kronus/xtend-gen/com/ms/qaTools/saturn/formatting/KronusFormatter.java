/**
 * generated by Xtext
 */
package com.ms.qaTools.saturn.formatting;

import com.google.inject.Inject;
import com.ms.qaTools.saturn.services.KronusGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.formatting.IIndentationInformation;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
@SuppressWarnings("all")
public class KronusFormatter extends AbstractDeclarativeFormatter {
  @Inject
  @Extension
  private KronusGrammarAccess _kronusGrammarAccess;
  
  protected void configureFormatting(final FormattingConfig c) {
    FormattingConfig.LinewrapLocator _setLinewrap = c.setLinewrap(0, 1, 2);
    TerminalRule _sL_COMMENTRule = this._kronusGrammarAccess.getSL_COMMENTRule();
    _setLinewrap.before(_sL_COMMENTRule);
    FormattingConfig.LinewrapLocator _setLinewrap_1 = c.setLinewrap(0, 1, 2);
    TerminalRule _mL_COMMENTRule = this._kronusGrammarAccess.getML_COMMENTRule();
    _setLinewrap_1.before(_mL_COMMENTRule);
    FormattingConfig.LinewrapLocator _setLinewrap_2 = c.setLinewrap(0, 1, 1);
    TerminalRule _mL_COMMENTRule_1 = this._kronusGrammarAccess.getML_COMMENTRule();
    _setLinewrap_2.after(_mL_COMMENTRule_1);
    FormattingConfig.LinewrapLocator _setLinewrap_3 = c.setLinewrap();
    ParserRule _iNCLUDERule = this._kronusGrammarAccess.getINCLUDERule();
    _setLinewrap_3.before(_iNCLUDERule);
    FormattingConfig.LinewrapLocator _setLinewrap_4 = c.setLinewrap();
    ParserRule _iMPORTRule = this._kronusGrammarAccess.getIMPORTRule();
    _setLinewrap_4.before(_iMPORTRule);
    FormattingConfig.LinewrapLocator _setLinewrap_5 = c.setLinewrap();
    ParserRule _tYPERule = this._kronusGrammarAccess.getTYPERule();
    _setLinewrap_5.before(_tYPERule);
    FormattingConfig.LinewrapLocator _setLinewrap_6 = c.setLinewrap();
    ParserRule _dEFRule = this._kronusGrammarAccess.getDEFRule();
    _setLinewrap_6.before(_dEFRule);
    FormattingConfig.LinewrapLocator _setLinewrap_7 = c.setLinewrap();
    ParserRule _vALRule = this._kronusGrammarAccess.getVALRule();
    _setLinewrap_7.before(_vALRule);
    FormattingConfig.LinewrapLocator _setLinewrap_8 = c.setLinewrap();
    ParserRule _hashtagCallRule = this._kronusGrammarAccess.getHashtagCallRule();
    _setLinewrap_8.before(_hashtagCallRule);
    FormattingConfig.LinewrapLocator _setLinewrap_9 = c.setLinewrap();
    ParserRule _rETURNRule = this._kronusGrammarAccess.getRETURNRule();
    _setLinewrap_9.before(_rETURNRule);
    c.setAutoLinewrap(120);
    c.setWrappedLineIndentation(2);
    List<Pair<Keyword, Keyword>> _findKeywordPairs = this._kronusGrammarAccess.findKeywordPairs("{", "}");
    for (final Pair<Keyword, Keyword> pair : _findKeywordPairs) {
      {
        FormattingConfig.SpaceLocator _setSpace = c.setSpace(" ");
        Keyword _first = pair.getFirst();
        _setSpace.before(_first);
        FormattingConfig.LinewrapLocator _setLinewrap_10 = c.setLinewrap();
        Keyword _first_1 = pair.getFirst();
        _setLinewrap_10.after(_first_1);
        Keyword _first_2 = pair.getFirst();
        Keyword _second = pair.getSecond();
        c.setIndentation(_first_2, _second);
        FormattingConfig.LinewrapLocator _setLinewrap_11 = c.setLinewrap();
        Keyword _second_1 = pair.getSecond();
        _setLinewrap_11.before(_second_1);
      }
    }
    this.formatBrackets(c, "(", ")");
    this.formatBrackets(c, "[", "]");
    List<Keyword> _findKeywords = this._kronusGrammarAccess.findKeywords("#");
    for (final Keyword k : _findKeywords) {
      FormattingConfig.NoSpaceLocator _setNoSpace = c.setNoSpace();
      _setNoSpace.after(k);
    }
    List<Keyword> _findKeywords_1 = this._kronusGrammarAccess.findKeywords(":", ",");
    for (final Keyword k_1 : _findKeywords_1) {
      FormattingConfig.NoSpaceLocator _setNoSpace_1 = c.setNoSpace();
      _setNoSpace_1.before(k_1);
    }
    List<Keyword> _findKeywords_2 = this._kronusGrammarAccess.findKeywords(".");
    for (final Keyword k_2 : _findKeywords_2) {
      {
        FormattingConfig.NoSpaceLocator _setNoSpace_2 = c.setNoSpace();
        _setNoSpace_2.before(k_2);
        FormattingConfig.NoSpaceLocator _setNoSpace_3 = c.setNoSpace();
        _setNoSpace_3.after(k_2);
      }
    }
  }
  
  protected void formatBrackets(final FormattingConfig c, final String left, final String right) {
    List<Pair<Keyword, Keyword>> _findKeywordPairs = this._kronusGrammarAccess.findKeywordPairs(left, right);
    for (final Pair<Keyword, Keyword> pair : _findKeywordPairs) {
      {
        FormattingConfig.NoSpaceLocator _setNoSpace = c.setNoSpace();
        Keyword _first = pair.getFirst();
        _setNoSpace.before(_first);
        FormattingConfig.NoSpaceLocator _setNoSpace_1 = c.setNoSpace();
        Keyword _first_1 = pair.getFirst();
        _setNoSpace_1.after(_first_1);
        FormattingConfig.NoSpaceLocator _setNoSpace_2 = c.setNoSpace();
        Keyword _second = pair.getSecond();
        _setNoSpace_2.before(_second);
      }
    }
  }
  
  protected IIndentationInformation getIndentInfo() {
    final IIndentationInformation _function = new IIndentationInformation() {
      public String getIndentString() {
        return "  ";
      }
    };
    return _function;
  }
}
