package functions

type Any
type Double
type String
type Boolean
type Seq[String]
type Stream
type Unit


def PRINTING(message: Any, x: Any): Stream = generate("bash") {
	echo $message $x >&2
}
def ADD(x: Double, y: Double): Any = generate("bash") {
	echo $(($x + $y))
}
def SUB(x: Double, y: Double): Any = generate("bash") {
	echo $(($x - $y)) 
}
def MULTIPLY(x: Double, y: Double): Double = {
   //Function to test nested functionality
   def ADDONE(x1: Double): Double = { 
       val X2 = x1 + 1
       return X2
   }
   return x * y
}
def PARAMETERTEST(myNumber1: Any, myNumber2: Any, myNumber3: Any): Unit = {
   def EQUALS(num: Any, result: Any): Boolean = {
	return num == result
   }
   val Num1 = PRINTING("Testing Param1(1==true,0==false):", EQUALS(myNumber1, 1))
   val Num2 = PRINTING("Testing Param2(1==true,0==false):", EQUALS(myNumber2, 2))
   val Num2 = PRINTING("Testing Param3(1==true,0s==false):", EQUALS(myNumber3, 3))
}
def SQUARED(x: Double = 5): Double = {
	return x * x
}
def BASHCOMMANDTEST(): Stream = generate("bash") {
	echo "Hello" > hello.txt
	PRINTING "Testing Bash Commands(Creating file):" "--" 
	cat hello.txt >&2
	PRINTING "Testing LS Command:" "--"
	ls -l >&2
	PRINTING "Testing AWK Command:" $(cat hello.txt | awk '{print $1}')
	PRINTING "Testing Kronus cross Bash Functions:" $(SQUARED 10)
	
	rm hello.txt
}
def LISTTESTING(Evens: Seq[String] = [2,4,6]): String = generate("bash") {
	printf "Testing Lists: (" >&2
	for i in ${Evens[@]};do printf $i" " >&2; done
	printf ")\n" >&2
	echo $Evens 
}
val Param = PARAMETERTEST(1,2,3)
val Commands = BASHCOMMANDTEST()
val AddedList = LISTTESTING()
val T1 = PRINTING("Testing Nested Functions:", SUB(2, ADD(4, 5))) 
val T3 = PRINTING("Testing Addition Function:", ADD(4, 5))
val T4 = PRINTING("Testing Multiplication Function:", MULTIPLY(6, 4))
val T5 = PRINTING("Testing Multiple Operations in param:", (SUB(2, 5) + ADD(4, 5)) * SUB(2, 5) - ADD(4, 5))
val T6 = PRINTING("Testing DefaultValues with value:", SQUARED(3))
val T7 = PRINTING("Testing DefaultValues without value:", SQUARED())












/*
Copyright 2017 Morgan Stanley

Licensed under the GNU Lesser General Public License Version 3 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

https://www.gnu.org/licenses/lgpl-3.0.en.html

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

IN ADDITION, THE FOLLOWING DISCLAIMER APPLIES IN CONNECTION WITH THIS PROGRAM:

THIS SOFTWARE IS LICENSED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AND ANY
WARRANTY OF NON-INFRINGEMENT, ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
OF SUCH DAMAGE. THIS SOFTWARE MAY BE REDISTRIBUTED TO OTHERS ONLY BY EFFECTIVELY
USING THIS OR ANOTHER EQUIVALENT DISCLAIMER IN ADDITION TO ANY OTHER REQUIRED
LICENSE TERMS.
*/
