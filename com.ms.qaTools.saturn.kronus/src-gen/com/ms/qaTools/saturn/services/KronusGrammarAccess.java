/*
* generated by Xtext
*/
package com.ms.qaTools.saturn.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class KronusGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TopLevelKronusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelKronus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageDefParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cKronusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKronusKronusParserRuleCall_1_0 = (RuleCall)cKronusAssignment_1.eContents().get(0);
		
		//TopLevelKronus:
		//	package=PackageDef kronus=Kronus;
		public ParserRule getRule() { return rule; }

		//package=PackageDef kronus=Kronus
		public Group getGroup() { return cGroup; }

		//package=PackageDef
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }

		//PackageDef
		public RuleCall getPackagePackageDefParserRuleCall_0_0() { return cPackagePackageDefParserRuleCall_0_0; }

		//kronus=Kronus
		public Assignment getKronusAssignment_1() { return cKronusAssignment_1; }

		//Kronus
		public RuleCall getKronusKronusParserRuleCall_1_0() { return cKronusKronusParserRuleCall_1_0; }
	}

	public class KronusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Kronus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKronusAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportDefParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cIncludesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIncludesIncludeDefParserRuleCall_2_0 = (RuleCall)cIncludesAssignment_2.eContents().get(0);
		private final Assignment cDefsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefsAbstractDefParserRuleCall_3_0 = (RuleCall)cDefsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cRETURNParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cReturnAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReturnValueOperationParserRuleCall_4_1_0 = (RuleCall)cReturnAssignment_4_1.eContents().get(0);
		
		//Kronus:
		//	{Kronus} imports+=ImportDef* includes+=IncludeDef* defs+=AbstractDef* (RETURN return=ValueOperation)?;
		public ParserRule getRule() { return rule; }

		//{Kronus} imports+=ImportDef* includes+=IncludeDef* defs+=AbstractDef* (RETURN return=ValueOperation)?
		public Group getGroup() { return cGroup; }

		//{Kronus}
		public Action getKronusAction_0() { return cKronusAction_0; }

		//imports+=ImportDef*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//ImportDef
		public RuleCall getImportsImportDefParserRuleCall_1_0() { return cImportsImportDefParserRuleCall_1_0; }

		//includes+=IncludeDef*
		public Assignment getIncludesAssignment_2() { return cIncludesAssignment_2; }

		//IncludeDef
		public RuleCall getIncludesIncludeDefParserRuleCall_2_0() { return cIncludesIncludeDefParserRuleCall_2_0; }

		//defs+=AbstractDef*
		public Assignment getDefsAssignment_3() { return cDefsAssignment_3; }

		//AbstractDef
		public RuleCall getDefsAbstractDefParserRuleCall_3_0() { return cDefsAbstractDefParserRuleCall_3_0; }

		//(RETURN return=ValueOperation)?
		public Group getGroup_4() { return cGroup_4; }

		//RETURN
		public RuleCall getRETURNParserRuleCall_4_0() { return cRETURNParserRuleCall_4_0; }

		//return=ValueOperation
		public Assignment getReturnAssignment_4_1() { return cReturnAssignment_4_1; }

		//ValueOperation
		public RuleCall getReturnValueOperationParserRuleCall_4_1_0() { return cReturnValueOperationParserRuleCall_4_1_0; }
	}

	public class AbstractDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnnotationDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHashtagDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cValDefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AbstractDef:
		//	TypeDef | AnnotationDef | HashtagDef | FunctionDef | ValDef;
		public ParserRule getRule() { return rule; }

		//TypeDef | AnnotationDef | HashtagDef | FunctionDef | ValDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDef
		public RuleCall getTypeDefParserRuleCall_0() { return cTypeDefParserRuleCall_0; }

		//AnnotationDef
		public RuleCall getAnnotationDefParserRuleCall_1() { return cAnnotationDefParserRuleCall_1; }

		//HashtagDef
		public RuleCall getHashtagDefParserRuleCall_2() { return cHashtagDefParserRuleCall_2; }

		//FunctionDef
		public RuleCall getFunctionDefParserRuleCall_3() { return cFunctionDefParserRuleCall_3; }

		//ValDef
		public RuleCall getValDefParserRuleCall_4() { return cValDefParserRuleCall_4; }
	}

	public class ReferenceableDefsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceableDefs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ReferenceableDefs:
		//	FunctionDef | ValDef | ParameterDef;
		public ParserRule getRule() { return rule; }

		//FunctionDef | ValDef | ParameterDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionDef
		public RuleCall getFunctionDefParserRuleCall_0() { return cFunctionDefParserRuleCall_0; }

		//ValDef
		public RuleCall getValDefParserRuleCall_1() { return cValDefParserRuleCall_1; }

		//ParameterDef
		public RuleCall getParameterDefParserRuleCall_2() { return cParameterDefParserRuleCall_2; }
	}

	public class ValDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHashtagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHashtagsHashtagCallParserRuleCall_0_0 = (RuleCall)cHashtagsAssignment_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationCallParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final RuleCall cVALParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameCAPITALIZED_IDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cKRONUS_ASSIGNTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueValueOperationParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//ValDef:
		//	hashtags+=HashtagCall* annotations+=AnnotationCall* VAL name=CAPITALIZED_ID KRONUS_ASSIGN value=ValueOperation;
		public ParserRule getRule() { return rule; }

		//hashtags+=HashtagCall* annotations+=AnnotationCall* VAL name=CAPITALIZED_ID KRONUS_ASSIGN value=ValueOperation
		public Group getGroup() { return cGroup; }

		//hashtags+=HashtagCall*
		public Assignment getHashtagsAssignment_0() { return cHashtagsAssignment_0; }

		//HashtagCall
		public RuleCall getHashtagsHashtagCallParserRuleCall_0_0() { return cHashtagsHashtagCallParserRuleCall_0_0; }

		//annotations+=AnnotationCall*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//AnnotationCall
		public RuleCall getAnnotationsAnnotationCallParserRuleCall_1_0() { return cAnnotationsAnnotationCallParserRuleCall_1_0; }

		//VAL
		public RuleCall getVALParserRuleCall_2() { return cVALParserRuleCall_2; }

		//name=CAPITALIZED_ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//CAPITALIZED_ID
		public RuleCall getNameCAPITALIZED_IDTerminalRuleCall_3_0() { return cNameCAPITALIZED_IDTerminalRuleCall_3_0; }

		//KRONUS_ASSIGN
		public RuleCall getKRONUS_ASSIGNTerminalRuleCall_4() { return cKRONUS_ASSIGNTerminalRuleCall_4; }

		//value=ValueOperation
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//ValueOperation
		public RuleCall getValueValueOperationParserRuleCall_5_0() { return cValueValueOperationParserRuleCall_5_0; }
	}

	public class PackageDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPACKAGEParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleModulePartsParserRuleCall_1_0 = (RuleCall)cModuleAssignment_1.eContents().get(0);
		
		//PackageDef:
		//	PACKAGE module=ModuleParts;
		public ParserRule getRule() { return rule; }

		//PACKAGE module=ModuleParts
		public Group getGroup() { return cGroup; }

		//PACKAGE
		public RuleCall getPACKAGEParserRuleCall_0() { return cPACKAGEParserRuleCall_0; }

		//module=ModuleParts
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }

		//ModuleParts
		public RuleCall getModuleModulePartsParserRuleCall_1_0() { return cModuleModulePartsParserRuleCall_1_0; }
	}

	public class ImportDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIMPORTParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleModuleDefParserRuleCall_1_0 = (RuleCall)cModuleAssignment_1.eContents().get(0);
		
		//ImportDef:
		//	IMPORT module=ModuleDef;
		public ParserRule getRule() { return rule; }

		//IMPORT module=ModuleDef
		public Group getGroup() { return cGroup; }

		//IMPORT
		public RuleCall getIMPORTParserRuleCall_0() { return cIMPORTParserRuleCall_0; }

		//module=ModuleDef
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }

		//ModuleDef
		public RuleCall getModuleModuleDefParserRuleCall_1_0() { return cModuleModuleDefParserRuleCall_1_0; }
	}

	public class IncludeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncludeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINCLUDEParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleModuleDefParserRuleCall_1_0 = (RuleCall)cModuleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cASParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameCAPITALIZED_IDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//IncludeDef:
		//	INCLUDE module=ModuleDef (AS name=CAPITALIZED_ID)?;
		public ParserRule getRule() { return rule; }

		//INCLUDE module=ModuleDef (AS name=CAPITALIZED_ID)?
		public Group getGroup() { return cGroup; }

		//INCLUDE
		public RuleCall getINCLUDEParserRuleCall_0() { return cINCLUDEParserRuleCall_0; }

		//module=ModuleDef
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }

		//ModuleDef
		public RuleCall getModuleModuleDefParserRuleCall_1_0() { return cModuleModuleDefParserRuleCall_1_0; }

		//(AS name=CAPITALIZED_ID)?
		public Group getGroup_2() { return cGroup_2; }

		//AS
		public RuleCall getASParserRuleCall_2_0() { return cASParserRuleCall_2_0; }

		//name=CAPITALIZED_ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//CAPITALIZED_ID
		public RuleCall getNameCAPITALIZED_IDTerminalRuleCall_2_1_0() { return cNameCAPITALIZED_IDTerminalRuleCall_2_1_0; }
	}

	public class ModulePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModulePart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeywordsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ModulePart:
		//	ID | Keywords;
		public ParserRule getRule() { return rule; }

		//ID | Keywords
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDParserRuleCall_0() { return cIDParserRuleCall_0; }

		//Keywords
		public RuleCall getKeywordsParserRuleCall_1() { return cKeywordsParserRuleCall_1; }
	}

	public class ModuleDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModulePartsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword c_Keyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cModuleLeafParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//ModuleDef hidden():
		//	ModuleParts ("." ("_" | ModuleLeaf))?;
		public ParserRule getRule() { return rule; }

		//ModuleParts ("." ("_" | ModuleLeaf))?
		public Group getGroup() { return cGroup; }

		//ModuleParts
		public RuleCall getModulePartsParserRuleCall_0() { return cModulePartsParserRuleCall_0; }

		//("." ("_" | ModuleLeaf))?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"_" | ModuleLeaf
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"_"
		public Keyword get_Keyword_1_1_0() { return c_Keyword_1_1_0; }

		//ModuleLeaf
		public RuleCall getModuleLeafParserRuleCall_1_1_1() { return cModuleLeafParserRuleCall_1_1_1; }
	}

	public class ModulePartsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleParts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModulePartParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cModulePartParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ModuleParts:
		//	ModulePart ("." ModulePart)*;
		public ParserRule getRule() { return rule; }

		//ModulePart ("." ModulePart)*
		public Group getGroup() { return cGroup; }

		//ModulePart
		public RuleCall getModulePartParserRuleCall_0() { return cModulePartParserRuleCall_0; }

		//("." ModulePart)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ModulePart
		public RuleCall getModulePartParserRuleCall_1_1() { return cModulePartParserRuleCall_1_1; }
	}

	public class ModuleLeafElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleLeaf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cModuleLeafPartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cModuleLeafPartParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ModuleLeaf hidden(WS):
		//	"{" ModuleLeafPart ("," ModuleLeafPart)* "}";
		public ParserRule getRule() { return rule; }

		//"{" ModuleLeafPart ("," ModuleLeafPart)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//ModuleLeafPart
		public RuleCall getModuleLeafPartParserRuleCall_1() { return cModuleLeafPartParserRuleCall_1; }

		//("," ModuleLeafPart)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//ModuleLeafPart
		public RuleCall getModuleLeafPartParserRuleCall_2_1() { return cModuleLeafPartParserRuleCall_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ModuleLeafPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleLeafPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModulePartParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cModulePartParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ModuleLeafPart hidden(WS):
		//	ModulePart ("=>" ModulePart)?;
		public ParserRule getRule() { return rule; }

		//ModulePart ("=>" ModulePart)?
		public Group getGroup() { return cGroup; }

		//ModulePart
		public RuleCall getModulePartParserRuleCall_0() { return cModulePartParserRuleCall_0; }

		//("=>" ModulePart)?
		public Group getGroup_1() { return cGroup_1; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0() { return cEqualsSignGreaterThanSignKeyword_1_0; }

		//ModulePart
		public RuleCall getModulePartParserRuleCall_1_1() { return cModulePartParserRuleCall_1_1; }
	}

	public class ASElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AS");
		private final Keyword cAsKeyword = (Keyword)rule.eContents().get(1);
		
		//AS:
		//	"as";
		public ParserRule getRule() { return rule; }

		//"as"
		public Keyword getAsKeyword() { return cAsKeyword; }
	}

	public class DEFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DEF");
		private final Keyword cDefKeyword = (Keyword)rule.eContents().get(1);
		
		//DEF:
		//	"def";
		public ParserRule getRule() { return rule; }

		//"def"
		public Keyword getDefKeyword() { return cDefKeyword; }
	}

	public class FALSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FALSE");
		private final Keyword cFalseKeyword = (Keyword)rule.eContents().get(1);
		
		//FALSE:
		//	"false";
		public ParserRule getRule() { return rule; }

		//"false"
		public Keyword getFalseKeyword() { return cFalseKeyword; }
	}

	public class GENERATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GENERATE");
		private final Keyword cGenerateKeyword = (Keyword)rule.eContents().get(1);
		
		//GENERATE:
		//	"generate";
		public ParserRule getRule() { return rule; }

		//"generate"
		public Keyword getGenerateKeyword() { return cGenerateKeyword; }
	}

	public class IMPORTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IMPORT");
		private final Keyword cImportKeyword = (Keyword)rule.eContents().get(1);
		
		//IMPORT:
		//	"import";
		public ParserRule getRule() { return rule; }

		//"import"
		public Keyword getImportKeyword() { return cImportKeyword; }
	}

	public class INCLUDEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INCLUDE");
		private final Keyword cIncludeKeyword = (Keyword)rule.eContents().get(1);
		
		//INCLUDE:
		//	"include";
		public ParserRule getRule() { return rule; }

		//"include"
		public Keyword getIncludeKeyword() { return cIncludeKeyword; }
	}

	public class KRONUSKWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KRONUSKW");
		private final Keyword cKronusKeyword = (Keyword)rule.eContents().get(1);
		
		//KRONUSKW:
		//	"kronus";
		public ParserRule getRule() { return rule; }

		//"kronus"
		public Keyword getKronusKeyword() { return cKronusKeyword; }
	}

	public class PACKAGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PACKAGE");
		private final Keyword cPackageKeyword = (Keyword)rule.eContents().get(1);
		
		//PACKAGE:
		//	"package";
		public ParserRule getRule() { return rule; }

		//"package"
		public Keyword getPackageKeyword() { return cPackageKeyword; }
	}

	public class RETURNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RETURN");
		private final Keyword cReturnKeyword = (Keyword)rule.eContents().get(1);
		
		//RETURN:
		//	"return";
		public ParserRule getRule() { return rule; }

		//"return"
		public Keyword getReturnKeyword() { return cReturnKeyword; }
	}

	public class TRUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TRUE");
		private final Keyword cTrueKeyword = (Keyword)rule.eContents().get(1);
		
		//TRUE:
		//	"true";
		public ParserRule getRule() { return rule; }

		//"true"
		public Keyword getTrueKeyword() { return cTrueKeyword; }
	}

	public class TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TYPE");
		private final Keyword cTypeKeyword = (Keyword)rule.eContents().get(1);
		
		//TYPE:
		//	"type";
		public ParserRule getRule() { return rule; }

		//"type"
		public Keyword getTypeKeyword() { return cTypeKeyword; }
	}

	public class VALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VAL");
		private final Keyword cValKeyword = (Keyword)rule.eContents().get(1);
		
		//VAL:
		//	"val";
		public ParserRule getRule() { return rule; }

		//"val"
		public Keyword getValKeyword() { return cValKeyword; }
	}

	public class WITHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WITH");
		private final Keyword cWithKeyword = (Keyword)rule.eContents().get(1);
		
		//WITH:
		//	"with";
		public ParserRule getRule() { return rule; }

		//"with"
		public Keyword getWithKeyword() { return cWithKeyword; }
	}

	public class KeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Keywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cASParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDEFParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFALSEParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGENERATEParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIMPORTParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cINCLUDEParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cKRONUSKWParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPACKAGEParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRETURNParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cTRUEParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTYPEParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cVALParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cWITHParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Keywords:
		//	AS | DEF | FALSE | GENERATE | IMPORT | INCLUDE | KRONUSKW | PACKAGE | RETURN | TRUE | TYPE | VAL | WITH;
		public ParserRule getRule() { return rule; }

		//AS | DEF | FALSE | GENERATE | IMPORT | INCLUDE | KRONUSKW | PACKAGE | RETURN | TRUE | TYPE | VAL | WITH
		public Alternatives getAlternatives() { return cAlternatives; }

		//AS
		public RuleCall getASParserRuleCall_0() { return cASParserRuleCall_0; }

		//DEF
		public RuleCall getDEFParserRuleCall_1() { return cDEFParserRuleCall_1; }

		//FALSE
		public RuleCall getFALSEParserRuleCall_2() { return cFALSEParserRuleCall_2; }

		//GENERATE
		public RuleCall getGENERATEParserRuleCall_3() { return cGENERATEParserRuleCall_3; }

		//IMPORT
		public RuleCall getIMPORTParserRuleCall_4() { return cIMPORTParserRuleCall_4; }

		//INCLUDE
		public RuleCall getINCLUDEParserRuleCall_5() { return cINCLUDEParserRuleCall_5; }

		//KRONUSKW
		public RuleCall getKRONUSKWParserRuleCall_6() { return cKRONUSKWParserRuleCall_6; }

		//PACKAGE
		public RuleCall getPACKAGEParserRuleCall_7() { return cPACKAGEParserRuleCall_7; }

		//RETURN
		public RuleCall getRETURNParserRuleCall_8() { return cRETURNParserRuleCall_8; }

		//TRUE
		public RuleCall getTRUEParserRuleCall_9() { return cTRUEParserRuleCall_9; }

		//TYPE
		public RuleCall getTYPEParserRuleCall_10() { return cTYPEParserRuleCall_10; }

		//VAL
		public RuleCall getVALParserRuleCall_11() { return cVALParserRuleCall_11; }

		//WITH
		public RuleCall getWITHParserRuleCall_12() { return cWITHParserRuleCall_12; }
	}

	public class TypeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarianceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cVarianceAlternatives_0_0 = (Alternatives)cVarianceAssignment_0.eContents().get(0);
		private final Keyword cVariancePlusSignKeyword_0_0_0 = (Keyword)cVarianceAlternatives_0_0.eContents().get(0);
		private final Keyword cVarianceHyphenMinusKeyword_0_0_1 = (Keyword)cVarianceAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCAPITALIZED_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBoundsHiAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBoundsHiTypeInstanceParserRuleCall_2_1_0 = (RuleCall)cBoundsHiAssignment_2_1.eContents().get(0);
		
		//TypeParameter returns TypeDef:
		//	variance=("+" | "-")? name=CAPITALIZED_ID ("<:" boundsHi=TypeInstance)?;
		public ParserRule getRule() { return rule; }

		//variance=("+" | "-")? name=CAPITALIZED_ID ("<:" boundsHi=TypeInstance)?
		public Group getGroup() { return cGroup; }

		//variance=("+" | "-")?
		public Assignment getVarianceAssignment_0() { return cVarianceAssignment_0; }

		//"+" | "-"
		public Alternatives getVarianceAlternatives_0_0() { return cVarianceAlternatives_0_0; }

		//"+"
		public Keyword getVariancePlusSignKeyword_0_0_0() { return cVariancePlusSignKeyword_0_0_0; }

		//"-"
		public Keyword getVarianceHyphenMinusKeyword_0_0_1() { return cVarianceHyphenMinusKeyword_0_0_1; }

		//name=CAPITALIZED_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//CAPITALIZED_ID
		public RuleCall getNameCAPITALIZED_IDTerminalRuleCall_1_0() { return cNameCAPITALIZED_IDTerminalRuleCall_1_0; }

		//("<:" boundsHi=TypeInstance)?
		public Group getGroup_2() { return cGroup_2; }

		//"<:"
		public Keyword getLessThanSignColonKeyword_2_0() { return cLessThanSignColonKeyword_2_0; }

		//boundsHi=TypeInstance
		public Assignment getBoundsHiAssignment_2_1() { return cBoundsHiAssignment_2_1; }

		//TypeInstance
		public RuleCall getBoundsHiTypeInstanceParserRuleCall_2_1_0() { return cBoundsHiTypeInstanceParserRuleCall_2_1_0; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTYPEParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCAPITALIZED_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeParametersTypeParameterParserRuleCall_2_1_0 = (RuleCall)cTypeParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTypeParametersTypeParameterParserRuleCall_2_2_1_0 = (RuleCall)cTypeParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cKRONUS_ASSIGNTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueTypeValueParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//// type A
		//// type A = String
		//// type A[B]
		//// type A[B] = Seq[B]
		//TypeDef:
		//	TYPE name=CAPITALIZED_ID ("[" typeParameters+=TypeParameter ("," typeParameters+=TypeParameter)* "]")? (KRONUS_ASSIGN
		//	value=TypeValue)?;
		public ParserRule getRule() { return rule; }

		//TYPE name=CAPITALIZED_ID ("[" typeParameters+=TypeParameter ("," typeParameters+=TypeParameter)* "]")? (KRONUS_ASSIGN
		//value=TypeValue)?
		public Group getGroup() { return cGroup; }

		//TYPE
		public RuleCall getTYPEParserRuleCall_0() { return cTYPEParserRuleCall_0; }

		//name=CAPITALIZED_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//CAPITALIZED_ID
		public RuleCall getNameCAPITALIZED_IDTerminalRuleCall_1_0() { return cNameCAPITALIZED_IDTerminalRuleCall_1_0; }

		//("[" typeParameters+=TypeParameter ("," typeParameters+=TypeParameter)* "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//typeParameters+=TypeParameter
		public Assignment getTypeParametersAssignment_2_1() { return cTypeParametersAssignment_2_1; }

		//TypeParameter
		public RuleCall getTypeParametersTypeParameterParserRuleCall_2_1_0() { return cTypeParametersTypeParameterParserRuleCall_2_1_0; }

		//("," typeParameters+=TypeParameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//typeParameters+=TypeParameter
		public Assignment getTypeParametersAssignment_2_2_1() { return cTypeParametersAssignment_2_2_1; }

		//TypeParameter
		public RuleCall getTypeParametersTypeParameterParserRuleCall_2_2_1_0() { return cTypeParametersTypeParameterParserRuleCall_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }

		//(KRONUS_ASSIGN value=TypeValue)?
		public Group getGroup_3() { return cGroup_3; }

		//KRONUS_ASSIGN
		public RuleCall getKRONUS_ASSIGNTerminalRuleCall_3_0() { return cKRONUS_ASSIGNTerminalRuleCall_3_0; }

		//value=TypeValue
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//TypeValue
		public RuleCall getValueTypeValueParserRuleCall_3_1_0() { return cValueTypeValueParserRuleCall_3_1_0; }
	}

	public class TypeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeValueAtomicParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cWITHParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExtensionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExtensionsTypeValueAtomicParserRuleCall_1_1_0 = (RuleCall)cExtensionsAssignment_1_1.eContents().get(0);
		
		//TypeValue hidden(WS):
		//	TypeValueAtomic (WITH extensions+=TypeValueAtomic)*;
		public ParserRule getRule() { return rule; }

		//TypeValueAtomic (WITH extensions+=TypeValueAtomic)*
		public Group getGroup() { return cGroup; }

		//TypeValueAtomic
		public RuleCall getTypeValueAtomicParserRuleCall_0() { return cTypeValueAtomicParserRuleCall_0; }

		//(WITH extensions+=TypeValueAtomic)*
		public Group getGroup_1() { return cGroup_1; }

		//WITH
		public RuleCall getWITHParserRuleCall_1_0() { return cWITHParserRuleCall_1_0; }

		//extensions+=TypeValueAtomic
		public Assignment getExtensionsAssignment_1_1() { return cExtensionsAssignment_1_1; }

		//TypeValueAtomic
		public RuleCall getExtensionsTypeValueAtomicParserRuleCall_1_1_0() { return cExtensionsTypeValueAtomicParserRuleCall_1_1_0; }
	}

	public class TypeValueAtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeValueAtomic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeIdParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParmsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParmsTypeValueParserRuleCall_1_1_0 = (RuleCall)cParmsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParmsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParmsTypeValueParserRuleCall_1_2_1_0 = (RuleCall)cParmsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//TypeValueAtomic returns TypeValue:
		//	type=TypeId ("[" parms+=TypeValue ("," parms+=TypeValue)* "]")?;
		public ParserRule getRule() { return rule; }

		//type=TypeId ("[" parms+=TypeValue ("," parms+=TypeValue)* "]")?
		public Group getGroup() { return cGroup; }

		//type=TypeId
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeId
		public RuleCall getTypeTypeIdParserRuleCall_0_0() { return cTypeTypeIdParserRuleCall_0_0; }

		//("[" parms+=TypeValue ("," parms+=TypeValue)* "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//parms+=TypeValue
		public Assignment getParmsAssignment_1_1() { return cParmsAssignment_1_1; }

		//TypeValue
		public RuleCall getParmsTypeValueParserRuleCall_1_1_0() { return cParmsTypeValueParserRuleCall_1_1_0; }

		//("," parms+=TypeValue)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//parms+=TypeValue
		public Assignment getParmsAssignment_1_2_1() { return cParmsAssignment_1_2_1; }

		//TypeValue
		public RuleCall getParmsTypeValueParserRuleCall_1_2_1_0() { return cParmsTypeValueParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class TypeNameStrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeNameStr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword c_Keyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		
		//TypeNameStr hidden():
		//	"_" | ID ("." ID)* ("." "_")?;
		public ParserRule getRule() { return rule; }

		//"_" | ID ("." ID)* ("." "_")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"_"
		public Keyword get_Keyword_0() { return c_Keyword_0; }

		//ID ("." ID)* ("." "_")?
		public Group getGroup_1() { return cGroup_1; }

		//ID
		public RuleCall getIDParserRuleCall_1_0() { return cIDParserRuleCall_1_0; }

		//("." ID)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//ID
		public RuleCall getIDParserRuleCall_1_1_1() { return cIDParserRuleCall_1_1_1; }

		//("." "_")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"."
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }

		//"_"
		public Keyword get_Keyword_1_2_1() { return c_Keyword_1_2_1; }
	}

	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTypeNameStrParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TypeName:
		//	name=TypeNameStr;
		public ParserRule getRule() { return rule; }

		//name=TypeNameStr
		public Assignment getNameAssignment() { return cNameAssignment; }

		//TypeNameStr
		public RuleCall getNameTypeNameStrParserRuleCall_0() { return cNameTypeNameStrParserRuleCall_0; }
	}

	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeRefTypeDefCrossReference_1_0 = (CrossReference)cTypeRefAssignment_1.eContents().get(0);
		private final RuleCall cTypeRefTypeDefIDParserRuleCall_1_0_1 = (RuleCall)cTypeRefTypeDefCrossReference_1_0.eContents().get(1);
		
		//TypeRef hidden():
		//	"$" typeRef=[TypeDef];
		public ParserRule getRule() { return rule; }

		//"$" typeRef=[TypeDef]
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//typeRef=[TypeDef]
		public Assignment getTypeRefAssignment_1() { return cTypeRefAssignment_1; }

		//[TypeDef]
		public CrossReference getTypeRefTypeDefCrossReference_1_0() { return cTypeRefTypeDefCrossReference_1_0; }

		//ID
		public RuleCall getTypeRefTypeDefIDParserRuleCall_1_0_1() { return cTypeRefTypeDefIDParserRuleCall_1_0_1; }
	}

	public class TypeIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeId:
		//	TypeName | TypeRef;
		public ParserRule getRule() { return rule; }

		//TypeName | TypeRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeName
		public RuleCall getTypeNameParserRuleCall_0() { return cTypeNameParserRuleCall_0; }

		//TypeRef
		public RuleCall getTypeRefParserRuleCall_1() { return cTypeRefParserRuleCall_1; }
	}

	public class TypeInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameTypeDefCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameTypeDefIDParserRuleCall_0_0_1 = (RuleCall)cNameTypeDefCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeParametersTypeInstanceParserRuleCall_1_1_0 = (RuleCall)cTypeParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeParametersTypeInstanceParserRuleCall_1_2_1_0 = (RuleCall)cTypeParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//// def A(a:String)
		//// def A[O](a:List[O]):O
		//// def A[O](a:List[List[O]]):O
		//TypeInstance:
		//	name=[TypeDef] ("[" typeParameters+=TypeInstance ("," typeParameters+=TypeInstance)* "]")?;
		public ParserRule getRule() { return rule; }

		//name=[TypeDef] ("[" typeParameters+=TypeInstance ("," typeParameters+=TypeInstance)* "]")?
		public Group getGroup() { return cGroup; }

		//name=[TypeDef]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[TypeDef]
		public CrossReference getNameTypeDefCrossReference_0_0() { return cNameTypeDefCrossReference_0_0; }

		//ID
		public RuleCall getNameTypeDefIDParserRuleCall_0_0_1() { return cNameTypeDefIDParserRuleCall_0_0_1; }

		//("[" typeParameters+=TypeInstance ("," typeParameters+=TypeInstance)* "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//typeParameters+=TypeInstance
		public Assignment getTypeParametersAssignment_1_1() { return cTypeParametersAssignment_1_1; }

		//TypeInstance
		public RuleCall getTypeParametersTypeInstanceParserRuleCall_1_1_0() { return cTypeParametersTypeInstanceParserRuleCall_1_1_0; }

		//("," typeParameters+=TypeInstance)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//typeParameters+=TypeInstance
		public Assignment getTypeParametersAssignment_1_2_1() { return cTypeParametersAssignment_1_2_1; }

		//TypeInstance
		public RuleCall getTypeParametersTypeInstanceParserRuleCall_1_2_1_0() { return cTypeParametersTypeInstanceParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class FunctionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHashtagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHashtagsHashtagCallParserRuleCall_0_0 = (RuleCall)cHashtagsAssignment_0.eContents().get(0);
		private final RuleCall cDEFParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameCAPITALIZED_IDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeParametersTypeParameterParserRuleCall_3_1_0 = (RuleCall)cTypeParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTypeParametersTypeParameterParserRuleCall_3_2_1_0 = (RuleCall)cTypeParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParameterDefsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParameterDefsParameterDefParserRuleCall_5_0_0 = (RuleCall)cParameterDefsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParameterDefsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParameterDefsParameterDefParserRuleCall_5_1_1_0 = (RuleCall)cParameterDefsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cReturnTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cReturnTypeTypeInstanceParserRuleCall_8_0 = (RuleCall)cReturnTypeAssignment_8.eContents().get(0);
		private final Assignment cValueAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cValueCodeAssignmentParserRuleCall_9_0 = (RuleCall)cValueAssignment_9.eContents().get(0);
		
		//FunctionDef:
		//	hashtags+=HashtagCall* DEF name=CAPITALIZED_ID ("[" typeParameters+=TypeParameter (","
		//	typeParameters+=TypeParameter)* "]")? "(" (parameterDefs+=ParameterDef ("," parameterDefs+=ParameterDef)*)? ")" ":"
		//	returnType=TypeInstance value=CodeAssignment?;
		public ParserRule getRule() { return rule; }

		//hashtags+=HashtagCall* DEF name=CAPITALIZED_ID ("[" typeParameters+=TypeParameter ("," typeParameters+=TypeParameter)*
		//"]")? "(" (parameterDefs+=ParameterDef ("," parameterDefs+=ParameterDef)*)? ")" ":" returnType=TypeInstance
		//value=CodeAssignment?
		public Group getGroup() { return cGroup; }

		//hashtags+=HashtagCall*
		public Assignment getHashtagsAssignment_0() { return cHashtagsAssignment_0; }

		//HashtagCall
		public RuleCall getHashtagsHashtagCallParserRuleCall_0_0() { return cHashtagsHashtagCallParserRuleCall_0_0; }

		//DEF
		public RuleCall getDEFParserRuleCall_1() { return cDEFParserRuleCall_1; }

		//name=CAPITALIZED_ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//CAPITALIZED_ID
		public RuleCall getNameCAPITALIZED_IDTerminalRuleCall_2_0() { return cNameCAPITALIZED_IDTerminalRuleCall_2_0; }

		//("[" typeParameters+=TypeParameter ("," typeParameters+=TypeParameter)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//typeParameters+=TypeParameter
		public Assignment getTypeParametersAssignment_3_1() { return cTypeParametersAssignment_3_1; }

		//TypeParameter
		public RuleCall getTypeParametersTypeParameterParserRuleCall_3_1_0() { return cTypeParametersTypeParameterParserRuleCall_3_1_0; }

		//("," typeParameters+=TypeParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//typeParameters+=TypeParameter
		public Assignment getTypeParametersAssignment_3_2_1() { return cTypeParametersAssignment_3_2_1; }

		//TypeParameter
		public RuleCall getTypeParametersTypeParameterParserRuleCall_3_2_1_0() { return cTypeParametersTypeParameterParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameterDefs+=ParameterDef ("," parameterDefs+=ParameterDef)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameterDefs+=ParameterDef
		public Assignment getParameterDefsAssignment_5_0() { return cParameterDefsAssignment_5_0; }

		//ParameterDef
		public RuleCall getParameterDefsParameterDefParserRuleCall_5_0_0() { return cParameterDefsParameterDefParserRuleCall_5_0_0; }

		//("," parameterDefs+=ParameterDef)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameterDefs+=ParameterDef
		public Assignment getParameterDefsAssignment_5_1_1() { return cParameterDefsAssignment_5_1_1; }

		//ParameterDef
		public RuleCall getParameterDefsParameterDefParserRuleCall_5_1_1_0() { return cParameterDefsParameterDefParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//returnType=TypeInstance
		public Assignment getReturnTypeAssignment_8() { return cReturnTypeAssignment_8; }

		//TypeInstance
		public RuleCall getReturnTypeTypeInstanceParserRuleCall_8_0() { return cReturnTypeTypeInstanceParserRuleCall_8_0; }

		//value=CodeAssignment?
		public Assignment getValueAssignment_9() { return cValueAssignment_9; }

		//CodeAssignment
		public RuleCall getValueCodeAssignmentParserRuleCall_9_0() { return cValueCodeAssignmentParserRuleCall_9_0; }
	}

	public class AnnotationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDEFParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameCAPITALIZED_IDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParameterDefsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParameterDefsParameterDefParserRuleCall_4_0_0 = (RuleCall)cParameterDefsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParameterDefsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParameterDefsParameterDefParserRuleCall_4_1_1_0 = (RuleCall)cParameterDefsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AnnotationDef:
		//	DEF "@" name=CAPITALIZED_ID "(" (parameterDefs+=ParameterDef ("," parameterDefs+=ParameterDef)*)? ")";
		public ParserRule getRule() { return rule; }

		//DEF "@" name=CAPITALIZED_ID "(" (parameterDefs+=ParameterDef ("," parameterDefs+=ParameterDef)*)? ")"
		public Group getGroup() { return cGroup; }

		//DEF
		public RuleCall getDEFParserRuleCall_0() { return cDEFParserRuleCall_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//name=CAPITALIZED_ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//CAPITALIZED_ID
		public RuleCall getNameCAPITALIZED_IDTerminalRuleCall_2_0() { return cNameCAPITALIZED_IDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameterDefs+=ParameterDef ("," parameterDefs+=ParameterDef)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameterDefs+=ParameterDef
		public Assignment getParameterDefsAssignment_4_0() { return cParameterDefsAssignment_4_0; }

		//ParameterDef
		public RuleCall getParameterDefsParameterDefParserRuleCall_4_0_0() { return cParameterDefsParameterDefParserRuleCall_4_0_0; }

		//("," parameterDefs+=ParameterDef)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameterDefs+=ParameterDef
		public Assignment getParameterDefsAssignment_4_1_1() { return cParameterDefsAssignment_4_1_1; }

		//ParameterDef
		public RuleCall getParameterDefsParameterDefParserRuleCall_4_1_1_0() { return cParameterDefsParameterDefParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class HashtagDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HashtagDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDEFParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameCAPITALIZED_IDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParameterDefsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParameterDefsParameterDefParserRuleCall_4_0_0 = (RuleCall)cParameterDefsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParameterDefsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParameterDefsParameterDefParserRuleCall_4_1_1_0 = (RuleCall)cParameterDefsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//HashtagDef:
		//	DEF "#" name=CAPITALIZED_ID "(" (parameterDefs+=ParameterDef ("," parameterDefs+=ParameterDef)*)? ")";
		public ParserRule getRule() { return rule; }

		//DEF "#" name=CAPITALIZED_ID "(" (parameterDefs+=ParameterDef ("," parameterDefs+=ParameterDef)*)? ")"
		public Group getGroup() { return cGroup; }

		//DEF
		public RuleCall getDEFParserRuleCall_0() { return cDEFParserRuleCall_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//name=CAPITALIZED_ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//CAPITALIZED_ID
		public RuleCall getNameCAPITALIZED_IDTerminalRuleCall_2_0() { return cNameCAPITALIZED_IDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameterDefs+=ParameterDef ("," parameterDefs+=ParameterDef)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameterDefs+=ParameterDef
		public Assignment getParameterDefsAssignment_4_0() { return cParameterDefsAssignment_4_0; }

		//ParameterDef
		public RuleCall getParameterDefsParameterDefParserRuleCall_4_0_0() { return cParameterDefsParameterDefParserRuleCall_4_0_0; }

		//("," parameterDefs+=ParameterDef)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameterDefs+=ParameterDef
		public Assignment getParameterDefsAssignment_4_1_1() { return cParameterDefsAssignment_4_1_1; }

		//ParameterDef
		public RuleCall getParameterDefsParameterDefParserRuleCall_4_1_1_0() { return cParameterDefsParameterDefParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class CodeAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CodeAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKRONUS_ASSIGNTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CodeAssignment:
		//	KRONUS_ASSIGN CodeBlock;
		public ParserRule getRule() { return rule; }

		//KRONUS_ASSIGN CodeBlock
		public Group getGroup() { return cGroup; }

		//KRONUS_ASSIGN
		public RuleCall getKRONUS_ASSIGNTerminalRuleCall_0() { return cKRONUS_ASSIGNTerminalRuleCall_0; }

		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1() { return cCodeBlockParserRuleCall_1; }
	}

	public class CodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CodeBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScalaCodeBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKronusCodeBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CodeBlock:
		//	ScalaCodeBlock | KronusCodeBlock;
		public ParserRule getRule() { return rule; }

		//ScalaCodeBlock | KronusCodeBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//ScalaCodeBlock
		public RuleCall getScalaCodeBlockParserRuleCall_0() { return cScalaCodeBlockParserRuleCall_0; }

		//KronusCodeBlock
		public RuleCall getKronusCodeBlockParserRuleCall_1() { return cKronusCodeBlockParserRuleCall_1; }
	}

	public class ScalaCodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScalaCodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGENERATEParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSTRINGTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCodeStrAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCodeStrSCALA_CODE_BLOCKParserRuleCall_4_0 = (RuleCall)cCodeStrAssignment_4.eContents().get(0);
		
		//ScalaCodeBlock:
		//	GENERATE "(" type=STRING ")" codeStr=SCALA_CODE_BLOCK;
		public ParserRule getRule() { return rule; }

		//GENERATE "(" type=STRING ")" codeStr=SCALA_CODE_BLOCK
		public Group getGroup() { return cGroup; }

		//GENERATE
		public RuleCall getGENERATEParserRuleCall_0() { return cGENERATEParserRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=STRING
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_2_0() { return cTypeSTRINGTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//codeStr=SCALA_CODE_BLOCK
		public Assignment getCodeStrAssignment_4() { return cCodeStrAssignment_4; }

		//SCALA_CODE_BLOCK
		public RuleCall getCodeStrSCALA_CODE_BLOCKParserRuleCall_4_0() { return cCodeStrSCALA_CODE_BLOCKParserRuleCall_4_0; }
	}

	public class KronusCodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KronusCodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeKRONUSKWParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeKronusParserRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//KronusCodeBlock:
		//	type=KRONUSKW? "{" code=Kronus "}";
		public ParserRule getRule() { return rule; }

		//type=KRONUSKW? "{" code=Kronus "}"
		public Group getGroup() { return cGroup; }

		//type=KRONUSKW?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//KRONUSKW
		public RuleCall getTypeKRONUSKWParserRuleCall_0_0() { return cTypeKRONUSKWParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//code=Kronus
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }

		//Kronus
		public RuleCall getCodeKronusParserRuleCall_2_0() { return cCodeKronusParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SimpleParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleParameterValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cKRONUS_ASSIGNTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SimpleParameterValue:
		//	name=ID KRONUS_ASSIGN value=STRING;
		public ParserRule getRule() { return rule; }

		//name=ID KRONUS_ASSIGN value=STRING
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDParserRuleCall_0_0() { return cNameIDParserRuleCall_0_0; }

		//KRONUS_ASSIGN
		public RuleCall getKRONUS_ASSIGNTerminalRuleCall_1() { return cKRONUS_ASSIGNTerminalRuleCall_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class HashtagCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HashtagCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethodHashtagDefCrossReference_1_0 = (CrossReference)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cMethodHashtagDefIDParserRuleCall_1_0_1 = (RuleCall)cMethodHashtagDefCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParameterValuesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParameterValuesSimpleParameterValueParserRuleCall_3_0_0 = (RuleCall)cParameterValuesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParameterValuesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParameterValuesSimpleParameterValueParserRuleCall_3_1_1_0 = (RuleCall)cParameterValuesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//HashtagCall:
		//	"#" method=[HashtagDef] "(" (parameterValues+=SimpleParameterValue ("," parameterValues+=SimpleParameterValue)*)?
		//	")";
		public ParserRule getRule() { return rule; }

		//"#" method=[HashtagDef] "(" (parameterValues+=SimpleParameterValue ("," parameterValues+=SimpleParameterValue)*)? ")"
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//method=[HashtagDef]
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }

		//[HashtagDef]
		public CrossReference getMethodHashtagDefCrossReference_1_0() { return cMethodHashtagDefCrossReference_1_0; }

		//ID
		public RuleCall getMethodHashtagDefIDParserRuleCall_1_0_1() { return cMethodHashtagDefIDParserRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameterValues+=SimpleParameterValue ("," parameterValues+=SimpleParameterValue)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameterValues+=SimpleParameterValue
		public Assignment getParameterValuesAssignment_3_0() { return cParameterValuesAssignment_3_0; }

		//SimpleParameterValue
		public RuleCall getParameterValuesSimpleParameterValueParserRuleCall_3_0_0() { return cParameterValuesSimpleParameterValueParserRuleCall_3_0_0; }

		//("," parameterValues+=SimpleParameterValue)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameterValues+=SimpleParameterValue
		public Assignment getParameterValuesAssignment_3_1_1() { return cParameterValuesAssignment_3_1_1; }

		//SimpleParameterValue
		public RuleCall getParameterValuesSimpleParameterValueParserRuleCall_3_1_1_0() { return cParameterValuesSimpleParameterValueParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AnnotationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethodAnnotationDefCrossReference_1_0 = (CrossReference)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cMethodAnnotationDefIDParserRuleCall_1_0_1 = (RuleCall)cMethodAnnotationDefCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParameterValuesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParameterValuesParameterValueParserRuleCall_3_0_0 = (RuleCall)cParameterValuesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParameterValuesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParameterValuesParameterValueParserRuleCall_3_1_1_0 = (RuleCall)cParameterValuesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AnnotationCall:
		//	"@" method=[AnnotationDef] "(" (parameterValues+=ParameterValue ("," parameterValues+=ParameterValue)*)? ")";
		public ParserRule getRule() { return rule; }

		//"@" method=[AnnotationDef] "(" (parameterValues+=ParameterValue ("," parameterValues+=ParameterValue)*)? ")"
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//method=[AnnotationDef]
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }

		//[AnnotationDef]
		public CrossReference getMethodAnnotationDefCrossReference_1_0() { return cMethodAnnotationDefCrossReference_1_0; }

		//ID
		public RuleCall getMethodAnnotationDefIDParserRuleCall_1_0_1() { return cMethodAnnotationDefIDParserRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameterValues+=ParameterValue ("," parameterValues+=ParameterValue)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameterValues+=ParameterValue
		public Assignment getParameterValuesAssignment_3_0() { return cParameterValuesAssignment_3_0; }

		//ParameterValue
		public RuleCall getParameterValuesParameterValueParserRuleCall_3_0_0() { return cParameterValuesParameterValueParserRuleCall_3_0_0; }

		//("," parameterValues+=ParameterValue)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameterValues+=ParameterValue
		public Assignment getParameterValuesAssignment_3_1_1() { return cParameterValuesAssignment_3_1_1; }

		//ParameterValue
		public RuleCall getParameterValuesParameterValueParserRuleCall_3_1_1_0() { return cParameterValuesParameterValueParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ParameterDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cByNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cByNameEqualsSignGreaterThanSignKeyword_2_0 = (Keyword)cByNameAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeInstanceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cListAsteriskKeyword_4_0 = (Keyword)cListAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cKRONUS_ASSIGNTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cDefaultValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDefaultValueValueOperationParserRuleCall_5_1_0 = (RuleCall)cDefaultValueAssignment_5_1.eContents().get(0);
		
		//ParameterDef:
		//	name=ID ":" byName?="=>"? type=TypeInstance list?="*"? (KRONUS_ASSIGN defaultValue=ValueOperation)?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" byName?="=>"? type=TypeInstance list?="*"? (KRONUS_ASSIGN defaultValue=ValueOperation)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDParserRuleCall_0_0() { return cNameIDParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//byName?="=>"?
		public Assignment getByNameAssignment_2() { return cByNameAssignment_2; }

		//"=>"
		public Keyword getByNameEqualsSignGreaterThanSignKeyword_2_0() { return cByNameEqualsSignGreaterThanSignKeyword_2_0; }

		//type=TypeInstance
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeInstance
		public RuleCall getTypeTypeInstanceParserRuleCall_3_0() { return cTypeTypeInstanceParserRuleCall_3_0; }

		//list?="*"?
		public Assignment getListAssignment_4() { return cListAssignment_4; }

		//"*"
		public Keyword getListAsteriskKeyword_4_0() { return cListAsteriskKeyword_4_0; }

		//(KRONUS_ASSIGN defaultValue=ValueOperation)?
		public Group getGroup_5() { return cGroup_5; }

		//KRONUS_ASSIGN
		public RuleCall getKRONUS_ASSIGNTerminalRuleCall_5_0() { return cKRONUS_ASSIGNTerminalRuleCall_5_0; }

		//defaultValue=ValueOperation
		public Assignment getDefaultValueAssignment_5_1() { return cDefaultValueAssignment_5_1; }

		//ValueOperation
		public RuleCall getDefaultValueValueOperationParserRuleCall_5_1_0() { return cDefaultValueValueOperationParserRuleCall_5_1_0; }
	}

	public class ParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKeywordParameterValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPositionParameterValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParameterValue:
		//	KeywordParameterValue | PositionParameterValue;
		public ParserRule getRule() { return rule; }

		//KeywordParameterValue | PositionParameterValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//KeywordParameterValue
		public RuleCall getKeywordParameterValueParserRuleCall_0() { return cKeywordParameterValueParserRuleCall_0; }

		//PositionParameterValue
		public RuleCall getPositionParameterValueParserRuleCall_1() { return cPositionParameterValueParserRuleCall_1; }
	}

	public class KeywordParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeywordParameterValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cKRONUS_ASSIGNTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueOperationParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//KeywordParameterValue:
		//	name=ID KRONUS_ASSIGN value=ValueOperation;
		public ParserRule getRule() { return rule; }

		//name=ID KRONUS_ASSIGN value=ValueOperation
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDParserRuleCall_0_0() { return cNameIDParserRuleCall_0_0; }

		//KRONUS_ASSIGN
		public RuleCall getKRONUS_ASSIGNTerminalRuleCall_1() { return cKRONUS_ASSIGNTerminalRuleCall_1; }

		//value=ValueOperation
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ValueOperation
		public RuleCall getValueValueOperationParserRuleCall_2_0() { return cValueValueOperationParserRuleCall_2_0; }
	}

	public class PositionParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PositionParameterValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueValueOperationParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//PositionParameterValue:
		//	value=ValueOperation;
		public ParserRule getRule() { return rule; }

		//value=ValueOperation
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ValueOperation
		public RuleCall getValueValueOperationParserRuleCall_0() { return cValueValueOperationParserRuleCall_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValueOperationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary returns Expression:
		//	Value | "(" ValueOperation ")";
		public ParserRule getRule() { return rule; }

		//Value | "(" ValueOperation ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//"(" ValueOperation ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//ValueOperation
		public RuleCall getValueOperationParserRuleCall_1_1() { return cValueOperationParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIncludeRefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDoubleLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIntegerLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBooleanLiteralParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cCodeBlockParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Value:
		//	Sequence | ValRef | FunctionCall | IncludeRef | StringLiteral | DoubleLiteral | IntegerLiteral | BooleanLiteral |
		//	CodeBlock;
		public ParserRule getRule() { return rule; }

		//Sequence | ValRef | FunctionCall | IncludeRef | StringLiteral | DoubleLiteral | IntegerLiteral | BooleanLiteral |
		//CodeBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//Sequence
		public RuleCall getSequenceParserRuleCall_0() { return cSequenceParserRuleCall_0; }

		//ValRef
		public RuleCall getValRefParserRuleCall_1() { return cValRefParserRuleCall_1; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_2() { return cFunctionCallParserRuleCall_2; }

		//IncludeRef
		public RuleCall getIncludeRefParserRuleCall_3() { return cIncludeRefParserRuleCall_3; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_4() { return cStringLiteralParserRuleCall_4; }

		//DoubleLiteral
		public RuleCall getDoubleLiteralParserRuleCall_5() { return cDoubleLiteralParserRuleCall_5; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_6() { return cIntegerLiteralParserRuleCall_6; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_7() { return cBooleanLiteralParserRuleCall_7; }

		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_8() { return cCodeBlockParserRuleCall_8; }
	}

	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesValueOperationParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesValueOperationParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Sequence:
		//	{Sequence} "[" (values+=ValueOperation ("," values+=ValueOperation)*)? "]";
		public ParserRule getRule() { return rule; }

		//{Sequence} "[" (values+=ValueOperation ("," values+=ValueOperation)*)? "]"
		public Group getGroup() { return cGroup; }

		//{Sequence}
		public Action getSequenceAction_0() { return cSequenceAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(values+=ValueOperation ("," values+=ValueOperation)*)?
		public Group getGroup_2() { return cGroup_2; }

		//values+=ValueOperation
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }

		//ValueOperation
		public RuleCall getValuesValueOperationParserRuleCall_2_0_0() { return cValuesValueOperationParserRuleCall_2_0_0; }

		//("," values+=ValueOperation)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//values+=ValueOperation
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }

		//ValueOperation
		public RuleCall getValuesValueOperationParserRuleCall_2_1_1_0() { return cValuesValueOperationParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ValRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefReferenceableDefsCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefReferenceableDefsIDParserRuleCall_0_1 = (RuleCall)cRefReferenceableDefsCrossReference_0.eContents().get(1);
		
		//ValRef:
		//	ref=[ReferenceableDefs];
		public ParserRule getRule() { return rule; }

		//ref=[ReferenceableDefs]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[ReferenceableDefs]
		public CrossReference getRefReferenceableDefsCrossReference_0() { return cRefReferenceableDefsCrossReference_0; }

		//ID
		public RuleCall getRefReferenceableDefsIDParserRuleCall_0_1() { return cRefReferenceableDefsIDParserRuleCall_0_1; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMethodFunctionDefCrossReference_0_0 = (CrossReference)cMethodAssignment_0.eContents().get(0);
		private final RuleCall cMethodFunctionDefIDParserRuleCall_0_0_1 = (RuleCall)cMethodFunctionDefCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameterValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameterValuesParameterValueParserRuleCall_2_0_0 = (RuleCall)cParameterValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParameterValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParameterValuesParameterValueParserRuleCall_2_1_1_0 = (RuleCall)cParameterValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//	method=[FunctionDef] "(" (parameterValues+=ParameterValue ("," parameterValues+=ParameterValue)*)? ")";
		public ParserRule getRule() { return rule; }

		//method=[FunctionDef] "(" (parameterValues+=ParameterValue ("," parameterValues+=ParameterValue)*)? ")"
		public Group getGroup() { return cGroup; }

		//method=[FunctionDef]
		public Assignment getMethodAssignment_0() { return cMethodAssignment_0; }

		//[FunctionDef]
		public CrossReference getMethodFunctionDefCrossReference_0_0() { return cMethodFunctionDefCrossReference_0_0; }

		//ID
		public RuleCall getMethodFunctionDefIDParserRuleCall_0_0_1() { return cMethodFunctionDefIDParserRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameterValues+=ParameterValue ("," parameterValues+=ParameterValue)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameterValues+=ParameterValue
		public Assignment getParameterValuesAssignment_2_0() { return cParameterValuesAssignment_2_0; }

		//ParameterValue
		public RuleCall getParameterValuesParameterValueParserRuleCall_2_0_0() { return cParameterValuesParameterValueParserRuleCall_2_0_0; }

		//("," parameterValues+=ParameterValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameterValues+=ParameterValue
		public Assignment getParameterValuesAssignment_2_1_1() { return cParameterValuesAssignment_2_1_1; }

		//ParameterValue
		public RuleCall getParameterValuesParameterValueParserRuleCall_2_1_1_0() { return cParameterValuesParameterValueParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class IncludeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncludeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncludeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIncludeIncludeDefCrossReference_0_0 = (CrossReference)cIncludeAssignment_0.eContents().get(0);
		private final RuleCall cIncludeIncludeDefIDParserRuleCall_0_0_1 = (RuleCall)cIncludeIncludeDefCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cRefAlternatives_2_0 = (Alternatives)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefValRefParserRuleCall_2_0_0 = (RuleCall)cRefAlternatives_2_0.eContents().get(0);
		private final RuleCall cRefFunctionCallParserRuleCall_2_0_1 = (RuleCall)cRefAlternatives_2_0.eContents().get(1);
		
		//IncludeRef:
		//	include=[IncludeDef] "." ref=(ValRef | FunctionCall);
		public ParserRule getRule() { return rule; }

		//include=[IncludeDef] "." ref=(ValRef | FunctionCall)
		public Group getGroup() { return cGroup; }

		//include=[IncludeDef]
		public Assignment getIncludeAssignment_0() { return cIncludeAssignment_0; }

		//[IncludeDef]
		public CrossReference getIncludeIncludeDefCrossReference_0_0() { return cIncludeIncludeDefCrossReference_0_0; }

		//ID
		public RuleCall getIncludeIncludeDefIDParserRuleCall_0_0_1() { return cIncludeIncludeDefIDParserRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//ref=(ValRef | FunctionCall)
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//ValRef | FunctionCall
		public Alternatives getRefAlternatives_2_0() { return cRefAlternatives_2_0; }

		//ValRef
		public RuleCall getRefValRefParserRuleCall_2_0_0() { return cRefValRefParserRuleCall_2_0_0; }

		//FunctionCall
		public RuleCall getRefFunctionCallParserRuleCall_2_0_1() { return cRefFunctionCallParserRuleCall_2_0_1; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class DoubleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLEParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DoubleLiteral:
		//	value=DOUBLE;
		public ParserRule getRule() { return rule; }

		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }

		//DOUBLE
		public RuleCall getValueDOUBLEParserRuleCall_0() { return cValueDOUBLEParserRuleCall_0; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLiteral:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteral:
		//	value=BOOLEAN;
		public ParserRule getRule() { return rule; }

		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BOOLEAN
		public RuleCall getValueBOOLEANParserRuleCall_0() { return cValueBOOLEANParserRuleCall_0; }
	}

	public class UnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpUNARY_OPSParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprUnaryOrPrimaryParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//UnaryOperation returns Expression:
		//	{UnaryOperation} op=UNARY_OPS expr=UnaryOrPrimary;
		public ParserRule getRule() { return rule; }

		//{UnaryOperation} op=UNARY_OPS expr=UnaryOrPrimary
		public Group getGroup() { return cGroup; }

		//{UnaryOperation}
		public Action getUnaryOperationAction_0() { return cUnaryOperationAction_0; }

		//op=UNARY_OPS
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//UNARY_OPS
		public RuleCall getOpUNARY_OPSParserRuleCall_1_0() { return cOpUNARY_OPSParserRuleCall_1_0; }

		//expr=UnaryOrPrimary
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//UnaryOrPrimary
		public RuleCall getExprUnaryOrPrimaryParserRuleCall_2_0() { return cExprUnaryOrPrimaryParserRuleCall_2_0; }
	}

	public class UnaryOrPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOrPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOrPrimary returns Expression:
		//	Primary | UnaryOperation;
		public ParserRule getRule() { return rule; }

		//Primary | UnaryOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//UnaryOperation
		public RuleCall getUnaryOperationParserRuleCall_1() { return cUnaryOperationParserRuleCall_1; }
	}

	public class BinaryOperation1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperation1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOrPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpBINARY_OPS_1ParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryOrPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BinaryOperation1 returns Expression:
		//	UnaryOrPrimary ({BinaryOperation.left=current} op=BINARY_OPS_1 right=UnaryOrPrimary)*;
		public ParserRule getRule() { return rule; }

		//UnaryOrPrimary ({BinaryOperation.left=current} op=BINARY_OPS_1 right=UnaryOrPrimary)*
		public Group getGroup() { return cGroup; }

		//UnaryOrPrimary
		public RuleCall getUnaryOrPrimaryParserRuleCall_0() { return cUnaryOrPrimaryParserRuleCall_0; }

		//({BinaryOperation.left=current} op=BINARY_OPS_1 right=UnaryOrPrimary)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }

		//op=BINARY_OPS_1
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//BINARY_OPS_1
		public RuleCall getOpBINARY_OPS_1ParserRuleCall_1_1_0() { return cOpBINARY_OPS_1ParserRuleCall_1_1_0; }

		//right=UnaryOrPrimary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//UnaryOrPrimary
		public RuleCall getRightUnaryOrPrimaryParserRuleCall_1_2_0() { return cRightUnaryOrPrimaryParserRuleCall_1_2_0; }
	}

	public class BinaryOperation2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperation2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinaryOperation1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpBINARY_OPS_2ParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBinaryOperation1ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BinaryOperation2 returns Expression:
		//	BinaryOperation1 ({BinaryOperation.left=current} op=BINARY_OPS_2 right=BinaryOperation1)*;
		public ParserRule getRule() { return rule; }

		//BinaryOperation1 ({BinaryOperation.left=current} op=BINARY_OPS_2 right=BinaryOperation1)*
		public Group getGroup() { return cGroup; }

		//BinaryOperation1
		public RuleCall getBinaryOperation1ParserRuleCall_0() { return cBinaryOperation1ParserRuleCall_0; }

		//({BinaryOperation.left=current} op=BINARY_OPS_2 right=BinaryOperation1)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }

		//op=BINARY_OPS_2
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//BINARY_OPS_2
		public RuleCall getOpBINARY_OPS_2ParserRuleCall_1_1_0() { return cOpBINARY_OPS_2ParserRuleCall_1_1_0; }

		//right=BinaryOperation1
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BinaryOperation1
		public RuleCall getRightBinaryOperation1ParserRuleCall_1_2_0() { return cRightBinaryOperation1ParserRuleCall_1_2_0; }
	}

	public class BinaryOperation3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperation3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinaryOperation2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpBINARY_OPS_3ParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBinaryOperation2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BinaryOperation3 returns Expression:
		//	BinaryOperation2 ({BinaryOperation.left=current} op=BINARY_OPS_3 right=BinaryOperation2)*;
		public ParserRule getRule() { return rule; }

		//BinaryOperation2 ({BinaryOperation.left=current} op=BINARY_OPS_3 right=BinaryOperation2)*
		public Group getGroup() { return cGroup; }

		//BinaryOperation2
		public RuleCall getBinaryOperation2ParserRuleCall_0() { return cBinaryOperation2ParserRuleCall_0; }

		//({BinaryOperation.left=current} op=BINARY_OPS_3 right=BinaryOperation2)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }

		//op=BINARY_OPS_3
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//BINARY_OPS_3
		public RuleCall getOpBINARY_OPS_3ParserRuleCall_1_1_0() { return cOpBINARY_OPS_3ParserRuleCall_1_1_0; }

		//right=BinaryOperation2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BinaryOperation2
		public RuleCall getRightBinaryOperation2ParserRuleCall_1_2_0() { return cRightBinaryOperation2ParserRuleCall_1_2_0; }
	}

	public class BinaryOperation4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperation4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinaryOperation3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpBINARY_OPS_4ParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBinaryOperation3ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BinaryOperation4 returns Expression:
		//	BinaryOperation3 ({BinaryOperation.left=current} op=BINARY_OPS_4 right=BinaryOperation3)*;
		public ParserRule getRule() { return rule; }

		//BinaryOperation3 ({BinaryOperation.left=current} op=BINARY_OPS_4 right=BinaryOperation3)*
		public Group getGroup() { return cGroup; }

		//BinaryOperation3
		public RuleCall getBinaryOperation3ParserRuleCall_0() { return cBinaryOperation3ParserRuleCall_0; }

		//({BinaryOperation.left=current} op=BINARY_OPS_4 right=BinaryOperation3)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }

		//op=BINARY_OPS_4
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//BINARY_OPS_4
		public RuleCall getOpBINARY_OPS_4ParserRuleCall_1_1_0() { return cOpBINARY_OPS_4ParserRuleCall_1_1_0; }

		//right=BinaryOperation3
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BinaryOperation3
		public RuleCall getRightBinaryOperation3ParserRuleCall_1_2_0() { return cRightBinaryOperation3ParserRuleCall_1_2_0; }
	}

	public class BinaryOperation5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperation5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinaryOperation4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpBINARY_OPS_5ParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBinaryOperation4ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BinaryOperation5 returns Expression:
		//	BinaryOperation4 ({BinaryOperation.left=current} op=BINARY_OPS_5 right=BinaryOperation4)*;
		public ParserRule getRule() { return rule; }

		//BinaryOperation4 ({BinaryOperation.left=current} op=BINARY_OPS_5 right=BinaryOperation4)*
		public Group getGroup() { return cGroup; }

		//BinaryOperation4
		public RuleCall getBinaryOperation4ParserRuleCall_0() { return cBinaryOperation4ParserRuleCall_0; }

		//({BinaryOperation.left=current} op=BINARY_OPS_5 right=BinaryOperation4)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }

		//op=BINARY_OPS_5
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//BINARY_OPS_5
		public RuleCall getOpBINARY_OPS_5ParserRuleCall_1_1_0() { return cOpBINARY_OPS_5ParserRuleCall_1_1_0; }

		//right=BinaryOperation4
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BinaryOperation4
		public RuleCall getRightBinaryOperation4ParserRuleCall_1_2_0() { return cRightBinaryOperation4ParserRuleCall_1_2_0; }
	}

	public class ValueOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinaryOperation5ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpBINARY_OPS_6ParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBinaryOperation5ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ValueOperation returns Expression:
		//	BinaryOperation5 ({BinaryOperation.left=current} op=BINARY_OPS_6 right=BinaryOperation5)*;
		public ParserRule getRule() { return rule; }

		//BinaryOperation5 ({BinaryOperation.left=current} op=BINARY_OPS_6 right=BinaryOperation5)*
		public Group getGroup() { return cGroup; }

		//BinaryOperation5
		public RuleCall getBinaryOperation5ParserRuleCall_0() { return cBinaryOperation5ParserRuleCall_0; }

		//({BinaryOperation.left=current} op=BINARY_OPS_6 right=BinaryOperation5)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }

		//op=BINARY_OPS_6
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//BINARY_OPS_6
		public RuleCall getOpBINARY_OPS_6ParserRuleCall_1_1_0() { return cOpBINARY_OPS_6ParserRuleCall_1_1_0; }

		//right=BinaryOperation5
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BinaryOperation5
		public RuleCall getRightBinaryOperation5ParserRuleCall_1_2_0() { return cRightBinaryOperation5ParserRuleCall_1_2_0; }
	}

	public class UNARY_ONLY_OPSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UNARY_ONLY_OPS");
		private final Keyword cExclamationMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//UNARY_ONLY_OPS:
		//	"!";
		public ParserRule getRule() { return rule; }

		//"!"
		public Keyword getExclamationMarkKeyword() { return cExclamationMarkKeyword; }
	}

	public class UNARY_OPSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UNARY_OPS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUNARY_ONLY_OPSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UNARY_OPS:
		//	UNARY_ONLY_OPS | "-";
		public ParserRule getRule() { return rule; }

		//UNARY_ONLY_OPS | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//UNARY_ONLY_OPS
		public RuleCall getUNARY_ONLY_OPSParserRuleCall_0() { return cUNARY_ONLY_OPSParserRuleCall_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class BINARY_OPS_1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BINARY_OPS_1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BINARY_OPS_1:
		//	"*" | "/";
		public ParserRule getRule() { return rule; }

		//"*" | "/"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}

	public class BINARY_OPS_2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BINARY_OPS_2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BINARY_OPS_2:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class BINARY_OPS_3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BINARY_OPS_3");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BINARY_OPS_3:
		//	"<" | "<=" | ">" | ">=";
		public ParserRule getRule() { return rule; }

		//"<" | "<=" | ">" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
	}

	public class BINARY_OPS_4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BINARY_OPS_4");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BINARY_OPS_4:
		//	"==" | "!=";
		public ParserRule getRule() { return rule; }

		//"==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class BINARY_OPS_5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BINARY_OPS_5");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//BINARY_OPS_5:
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class BINARY_OPS_6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BINARY_OPS_6");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//BINARY_OPS_6:
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class NOT_A_BRACKETElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NOT_A_BRACKET");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUNARY_ONLY_OPSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBINARY_OPS_1ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBINARY_OPS_2ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBINARY_OPS_3ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBINARY_OPS_4ParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBINARY_OPS_5ParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBINARY_OPS_6ParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Keyword cNumberSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDollarSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPercentSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAmpersandKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cCommaKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cFullStopKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cColonKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final RuleCall cKRONUS_ASSIGNTerminalRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final Keyword cQuestionMarkKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cCommercialAtKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cReverseSolidusKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cCircumflexAccentKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword c_Keyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cGraveAccentKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cVerticalLineKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cTildeKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cLessThanSignHyphenMinusKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cEqualsSignGreaterThanSignKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final RuleCall cWSTerminalRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cINTTerminalRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cIDParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cTRIPPLE_STRINGTerminalRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cML_COMMENTTerminalRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cSL_COMMENTTerminalRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cKeywordsParserRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		
		//NOT_A_BRACKET hidden():
		//	UNARY_ONLY_OPS | BINARY_OPS_1 | BINARY_OPS_2 | BINARY_OPS_3 | BINARY_OPS_4 | BINARY_OPS_5 | BINARY_OPS_6 | "#" | "$"
		//	| "%" | "&" | "," | "." | ":" | ";" | KRONUS_ASSIGN | "?" | "@" | "\\" | "^" | "_" | "`" | "|" | "~" | "<-" | "=>" |
		//	WS | INT | ID | TRIPPLE_STRING | ML_COMMENT | SL_COMMENT | Keywords;
		public ParserRule getRule() { return rule; }

		//UNARY_ONLY_OPS | BINARY_OPS_1 | BINARY_OPS_2 | BINARY_OPS_3 | BINARY_OPS_4 | BINARY_OPS_5 | BINARY_OPS_6 | "#" | "$" |
		//"%" | "&" | "," | "." | ":" | ";" | KRONUS_ASSIGN | "?" | "@" | "\\" | "^" | "_" | "`" | "|" | "~" | "<-" | "=>" | WS
		//| INT | ID | TRIPPLE_STRING | ML_COMMENT | SL_COMMENT | Keywords
		public Alternatives getAlternatives() { return cAlternatives; }

		//UNARY_ONLY_OPS
		public RuleCall getUNARY_ONLY_OPSParserRuleCall_0() { return cUNARY_ONLY_OPSParserRuleCall_0; }

		//BINARY_OPS_1
		public RuleCall getBINARY_OPS_1ParserRuleCall_1() { return cBINARY_OPS_1ParserRuleCall_1; }

		//BINARY_OPS_2
		public RuleCall getBINARY_OPS_2ParserRuleCall_2() { return cBINARY_OPS_2ParserRuleCall_2; }

		//BINARY_OPS_3
		public RuleCall getBINARY_OPS_3ParserRuleCall_3() { return cBINARY_OPS_3ParserRuleCall_3; }

		//BINARY_OPS_4
		public RuleCall getBINARY_OPS_4ParserRuleCall_4() { return cBINARY_OPS_4ParserRuleCall_4; }

		//BINARY_OPS_5
		public RuleCall getBINARY_OPS_5ParserRuleCall_5() { return cBINARY_OPS_5ParserRuleCall_5; }

		//BINARY_OPS_6
		public RuleCall getBINARY_OPS_6ParserRuleCall_6() { return cBINARY_OPS_6ParserRuleCall_6; }

		//"#"
		public Keyword getNumberSignKeyword_7() { return cNumberSignKeyword_7; }

		//"$"
		public Keyword getDollarSignKeyword_8() { return cDollarSignKeyword_8; }

		//"%"
		public Keyword getPercentSignKeyword_9() { return cPercentSignKeyword_9; }

		//"&"
		public Keyword getAmpersandKeyword_10() { return cAmpersandKeyword_10; }

		//","
		public Keyword getCommaKeyword_11() { return cCommaKeyword_11; }

		//"."
		public Keyword getFullStopKeyword_12() { return cFullStopKeyword_12; }

		//":"
		public Keyword getColonKeyword_13() { return cColonKeyword_13; }

		//";"
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }

		//KRONUS_ASSIGN
		public RuleCall getKRONUS_ASSIGNTerminalRuleCall_15() { return cKRONUS_ASSIGNTerminalRuleCall_15; }

		//"?"
		public Keyword getQuestionMarkKeyword_16() { return cQuestionMarkKeyword_16; }

		//"@"
		public Keyword getCommercialAtKeyword_17() { return cCommercialAtKeyword_17; }

		//"\\"
		public Keyword getReverseSolidusKeyword_18() { return cReverseSolidusKeyword_18; }

		//"^"
		public Keyword getCircumflexAccentKeyword_19() { return cCircumflexAccentKeyword_19; }

		//"_"
		public Keyword get_Keyword_20() { return c_Keyword_20; }

		//"`"
		public Keyword getGraveAccentKeyword_21() { return cGraveAccentKeyword_21; }

		//"|"
		public Keyword getVerticalLineKeyword_22() { return cVerticalLineKeyword_22; }

		//"~"
		public Keyword getTildeKeyword_23() { return cTildeKeyword_23; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_24() { return cLessThanSignHyphenMinusKeyword_24; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_25() { return cEqualsSignGreaterThanSignKeyword_25; }

		//WS
		public RuleCall getWSTerminalRuleCall_26() { return cWSTerminalRuleCall_26; }

		//INT
		public RuleCall getINTTerminalRuleCall_27() { return cINTTerminalRuleCall_27; }

		//ID
		public RuleCall getIDParserRuleCall_28() { return cIDParserRuleCall_28; }

		//TRIPPLE_STRING
		public RuleCall getTRIPPLE_STRINGTerminalRuleCall_29() { return cTRIPPLE_STRINGTerminalRuleCall_29; }

		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall_30() { return cML_COMMENTTerminalRuleCall_30; }

		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_31() { return cSL_COMMENTTerminalRuleCall_31; }

		//Keywords
		public RuleCall getKeywordsParserRuleCall_32() { return cKeywordsParserRuleCall_32; }
	}

	public class SQUIGGLY_BRACKET_BLOCKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SQUIGGLY_BRACKET_BLOCK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBRACKET_BLOCK_CENTERParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SQUIGGLY_BRACKET_BLOCK hidden():
		//	"{" BRACKET_BLOCK_CENTER "}";
		public ParserRule getRule() { return rule; }

		//"{" BRACKET_BLOCK_CENTER "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//BRACKET_BLOCK_CENTER
		public RuleCall getBRACKET_BLOCK_CENTERParserRuleCall_1() { return cBRACKET_BLOCK_CENTERParserRuleCall_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ROUND_BRACKET_BLOCKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ROUND_BRACKET_BLOCK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBRACKET_BLOCK_CENTERParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ROUND_BRACKET_BLOCK hidden():
		//	"(" BRACKET_BLOCK_CENTER ")";
		public ParserRule getRule() { return rule; }

		//"(" BRACKET_BLOCK_CENTER ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//BRACKET_BLOCK_CENTER
		public RuleCall getBRACKET_BLOCK_CENTERParserRuleCall_1() { return cBRACKET_BLOCK_CENTERParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class SQUARE_BRACKET_BLOCKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SQUARE_BRACKET_BLOCK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBRACKET_BLOCK_CENTERParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SQUARE_BRACKET_BLOCK hidden():
		//	"[" BRACKET_BLOCK_CENTER "]";
		public ParserRule getRule() { return rule; }

		//"[" BRACKET_BLOCK_CENTER "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//BRACKET_BLOCK_CENTER
		public RuleCall getBRACKET_BLOCK_CENTERParserRuleCall_1() { return cBRACKET_BLOCK_CENTERParserRuleCall_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class BRACKET_BLOCK_CENTERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BRACKET_BLOCK_CENTER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNOT_A_BRACKETParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSQUIGGLY_BRACKET_BLOCKParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cROUND_BRACKET_BLOCKParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSQUARE_BRACKET_BLOCKParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BRACKET_BLOCK_CENTER hidden():
		//	(NOT_A_BRACKET | SQUIGGLY_BRACKET_BLOCK | ROUND_BRACKET_BLOCK | SQUARE_BRACKET_BLOCK | STRING)*;
		public ParserRule getRule() { return rule; }

		//(NOT_A_BRACKET | SQUIGGLY_BRACKET_BLOCK | ROUND_BRACKET_BLOCK | SQUARE_BRACKET_BLOCK | STRING)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//NOT_A_BRACKET
		public RuleCall getNOT_A_BRACKETParserRuleCall_0() { return cNOT_A_BRACKETParserRuleCall_0; }

		//SQUIGGLY_BRACKET_BLOCK
		public RuleCall getSQUIGGLY_BRACKET_BLOCKParserRuleCall_1() { return cSQUIGGLY_BRACKET_BLOCKParserRuleCall_1; }

		//ROUND_BRACKET_BLOCK
		public RuleCall getROUND_BRACKET_BLOCKParserRuleCall_2() { return cROUND_BRACKET_BLOCKParserRuleCall_2; }

		//SQUARE_BRACKET_BLOCK
		public RuleCall getSQUARE_BRACKET_BLOCKParserRuleCall_3() { return cSQUARE_BRACKET_BLOCKParserRuleCall_3; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
	}

	public class SCALA_CODE_BLOCKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SCALA_CODE_BLOCK");
		private final RuleCall cSQUIGGLY_BRACKET_BLOCKParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SCALA_CODE_BLOCK hidden():
		//	SQUIGGLY_BRACKET_BLOCK;
		public ParserRule getRule() { return rule; }

		//SQUIGGLY_BRACKET_BLOCK
		public RuleCall getSQUIGGLY_BRACKET_BLOCKParserRuleCall() { return cSQUIGGLY_BRACKET_BLOCKParserRuleCall; }
	}

	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTRUEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFALSEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BOOLEAN returns ecore::EBoolean:
		//	TRUE | FALSE;
		public ParserRule getRule() { return rule; }

		//TRUE | FALSE
		public Alternatives getAlternatives() { return cAlternatives; }

		//TRUE
		public RuleCall getTRUEParserRuleCall_0() { return cTRUEParserRuleCall_0; }

		//FALSE
		public RuleCall getFALSEParserRuleCall_1() { return cFALSEParserRuleCall_1; }
	}

	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DOUBLE returns ecore::EDouble:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCAPITALIZED_IDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOTHER_IDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ID:
		//	CAPITALIZED_ID | OTHER_ID;
		public ParserRule getRule() { return rule; }

		//CAPITALIZED_ID | OTHER_ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//CAPITALIZED_ID
		public RuleCall getCAPITALIZED_IDTerminalRuleCall_0() { return cCAPITALIZED_IDTerminalRuleCall_0; }

		//OTHER_ID
		public RuleCall getOTHER_IDTerminalRuleCall_1() { return cOTHER_IDTerminalRuleCall_1; }
	}
	
	
	private final TopLevelKronusElements pTopLevelKronus;
	private final KronusElements pKronus;
	private final AbstractDefElements pAbstractDef;
	private final ReferenceableDefsElements pReferenceableDefs;
	private final ValDefElements pValDef;
	private final PackageDefElements pPackageDef;
	private final ImportDefElements pImportDef;
	private final IncludeDefElements pIncludeDef;
	private final ModulePartElements pModulePart;
	private final ModuleDefElements pModuleDef;
	private final ModulePartsElements pModuleParts;
	private final ModuleLeafElements pModuleLeaf;
	private final ModuleLeafPartElements pModuleLeafPart;
	private final ASElements pAS;
	private final DEFElements pDEF;
	private final FALSEElements pFALSE;
	private final GENERATEElements pGENERATE;
	private final IMPORTElements pIMPORT;
	private final INCLUDEElements pINCLUDE;
	private final KRONUSKWElements pKRONUSKW;
	private final PACKAGEElements pPACKAGE;
	private final RETURNElements pRETURN;
	private final TRUEElements pTRUE;
	private final TYPEElements pTYPE;
	private final VALElements pVAL;
	private final WITHElements pWITH;
	private final KeywordsElements pKeywords;
	private final TypeParameterElements pTypeParameter;
	private final TypeDefElements pTypeDef;
	private final TypeValueElements pTypeValue;
	private final TypeValueAtomicElements pTypeValueAtomic;
	private final TypeNameStrElements pTypeNameStr;
	private final TypeNameElements pTypeName;
	private final TypeRefElements pTypeRef;
	private final TypeIdElements pTypeId;
	private final TypeInstanceElements pTypeInstance;
	private final FunctionDefElements pFunctionDef;
	private final AnnotationDefElements pAnnotationDef;
	private final HashtagDefElements pHashtagDef;
	private final CodeAssignmentElements pCodeAssignment;
	private final CodeBlockElements pCodeBlock;
	private final ScalaCodeBlockElements pScalaCodeBlock;
	private final KronusCodeBlockElements pKronusCodeBlock;
	private final SimpleParameterValueElements pSimpleParameterValue;
	private final HashtagCallElements pHashtagCall;
	private final AnnotationCallElements pAnnotationCall;
	private final ParameterDefElements pParameterDef;
	private final ParameterValueElements pParameterValue;
	private final KeywordParameterValueElements pKeywordParameterValue;
	private final PositionParameterValueElements pPositionParameterValue;
	private final PrimaryElements pPrimary;
	private final ValueElements pValue;
	private final SequenceElements pSequence;
	private final ValRefElements pValRef;
	private final FunctionCallElements pFunctionCall;
	private final IncludeRefElements pIncludeRef;
	private final StringLiteralElements pStringLiteral;
	private final DoubleLiteralElements pDoubleLiteral;
	private final IntegerLiteralElements pIntegerLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final UnaryOperationElements pUnaryOperation;
	private final UnaryOrPrimaryElements pUnaryOrPrimary;
	private final BinaryOperation1Elements pBinaryOperation1;
	private final BinaryOperation2Elements pBinaryOperation2;
	private final BinaryOperation3Elements pBinaryOperation3;
	private final BinaryOperation4Elements pBinaryOperation4;
	private final BinaryOperation5Elements pBinaryOperation5;
	private final ValueOperationElements pValueOperation;
	private final UNARY_ONLY_OPSElements pUNARY_ONLY_OPS;
	private final UNARY_OPSElements pUNARY_OPS;
	private final BINARY_OPS_1Elements pBINARY_OPS_1;
	private final BINARY_OPS_2Elements pBINARY_OPS_2;
	private final BINARY_OPS_3Elements pBINARY_OPS_3;
	private final BINARY_OPS_4Elements pBINARY_OPS_4;
	private final BINARY_OPS_5Elements pBINARY_OPS_5;
	private final BINARY_OPS_6Elements pBINARY_OPS_6;
	private final NOT_A_BRACKETElements pNOT_A_BRACKET;
	private final SQUIGGLY_BRACKET_BLOCKElements pSQUIGGLY_BRACKET_BLOCK;
	private final ROUND_BRACKET_BLOCKElements pROUND_BRACKET_BLOCK;
	private final SQUARE_BRACKET_BLOCKElements pSQUARE_BRACKET_BLOCK;
	private final BRACKET_BLOCK_CENTERElements pBRACKET_BLOCK_CENTER;
	private final SCALA_CODE_BLOCKElements pSCALA_CODE_BLOCK;
	private final BOOLEANElements pBOOLEAN;
	private final DOUBLEElements pDOUBLE;
	private final IDElements pID;
	private final TerminalRule tKRONUS_ASSIGN;
	private final TerminalRule tCAPITALIZED_ID;
	private final TerminalRule tOTHER_ID;
	private final TerminalRule tINT;
	private final TerminalRule tTRIPPLE_STRING;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public KronusGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pTopLevelKronus = new TopLevelKronusElements();
		this.pKronus = new KronusElements();
		this.pAbstractDef = new AbstractDefElements();
		this.pReferenceableDefs = new ReferenceableDefsElements();
		this.pValDef = new ValDefElements();
		this.pPackageDef = new PackageDefElements();
		this.pImportDef = new ImportDefElements();
		this.pIncludeDef = new IncludeDefElements();
		this.pModulePart = new ModulePartElements();
		this.pModuleDef = new ModuleDefElements();
		this.pModuleParts = new ModulePartsElements();
		this.pModuleLeaf = new ModuleLeafElements();
		this.pModuleLeafPart = new ModuleLeafPartElements();
		this.pAS = new ASElements();
		this.pDEF = new DEFElements();
		this.pFALSE = new FALSEElements();
		this.pGENERATE = new GENERATEElements();
		this.pIMPORT = new IMPORTElements();
		this.pINCLUDE = new INCLUDEElements();
		this.pKRONUSKW = new KRONUSKWElements();
		this.pPACKAGE = new PACKAGEElements();
		this.pRETURN = new RETURNElements();
		this.pTRUE = new TRUEElements();
		this.pTYPE = new TYPEElements();
		this.pVAL = new VALElements();
		this.pWITH = new WITHElements();
		this.pKeywords = new KeywordsElements();
		this.pTypeParameter = new TypeParameterElements();
		this.pTypeDef = new TypeDefElements();
		this.pTypeValue = new TypeValueElements();
		this.pTypeValueAtomic = new TypeValueAtomicElements();
		this.pTypeNameStr = new TypeNameStrElements();
		this.pTypeName = new TypeNameElements();
		this.pTypeRef = new TypeRefElements();
		this.pTypeId = new TypeIdElements();
		this.pTypeInstance = new TypeInstanceElements();
		this.pFunctionDef = new FunctionDefElements();
		this.pAnnotationDef = new AnnotationDefElements();
		this.pHashtagDef = new HashtagDefElements();
		this.pCodeAssignment = new CodeAssignmentElements();
		this.pCodeBlock = new CodeBlockElements();
		this.pScalaCodeBlock = new ScalaCodeBlockElements();
		this.pKronusCodeBlock = new KronusCodeBlockElements();
		this.pSimpleParameterValue = new SimpleParameterValueElements();
		this.pHashtagCall = new HashtagCallElements();
		this.pAnnotationCall = new AnnotationCallElements();
		this.pParameterDef = new ParameterDefElements();
		this.pParameterValue = new ParameterValueElements();
		this.pKeywordParameterValue = new KeywordParameterValueElements();
		this.pPositionParameterValue = new PositionParameterValueElements();
		this.pPrimary = new PrimaryElements();
		this.pValue = new ValueElements();
		this.pSequence = new SequenceElements();
		this.pValRef = new ValRefElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pIncludeRef = new IncludeRefElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pDoubleLiteral = new DoubleLiteralElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pUnaryOperation = new UnaryOperationElements();
		this.pUnaryOrPrimary = new UnaryOrPrimaryElements();
		this.pBinaryOperation1 = new BinaryOperation1Elements();
		this.pBinaryOperation2 = new BinaryOperation2Elements();
		this.pBinaryOperation3 = new BinaryOperation3Elements();
		this.pBinaryOperation4 = new BinaryOperation4Elements();
		this.pBinaryOperation5 = new BinaryOperation5Elements();
		this.pValueOperation = new ValueOperationElements();
		this.pUNARY_ONLY_OPS = new UNARY_ONLY_OPSElements();
		this.pUNARY_OPS = new UNARY_OPSElements();
		this.pBINARY_OPS_1 = new BINARY_OPS_1Elements();
		this.pBINARY_OPS_2 = new BINARY_OPS_2Elements();
		this.pBINARY_OPS_3 = new BINARY_OPS_3Elements();
		this.pBINARY_OPS_4 = new BINARY_OPS_4Elements();
		this.pBINARY_OPS_5 = new BINARY_OPS_5Elements();
		this.pBINARY_OPS_6 = new BINARY_OPS_6Elements();
		this.pNOT_A_BRACKET = new NOT_A_BRACKETElements();
		this.pSQUIGGLY_BRACKET_BLOCK = new SQUIGGLY_BRACKET_BLOCKElements();
		this.pROUND_BRACKET_BLOCK = new ROUND_BRACKET_BLOCKElements();
		this.pSQUARE_BRACKET_BLOCK = new SQUARE_BRACKET_BLOCKElements();
		this.pBRACKET_BLOCK_CENTER = new BRACKET_BLOCK_CENTERElements();
		this.pSCALA_CODE_BLOCK = new SCALA_CODE_BLOCKElements();
		this.pBOOLEAN = new BOOLEANElements();
		this.pDOUBLE = new DOUBLEElements();
		this.pID = new IDElements();
		this.tKRONUS_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "KRONUS_ASSIGN");
		this.tCAPITALIZED_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CAPITALIZED_ID");
		this.tOTHER_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OTHER_ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tTRIPPLE_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TRIPPLE_STRING");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ms.qaTools.saturn.Kronus".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//TopLevelKronus:
	//	package=PackageDef kronus=Kronus;
	public TopLevelKronusElements getTopLevelKronusAccess() {
		return pTopLevelKronus;
	}
	
	public ParserRule getTopLevelKronusRule() {
		return getTopLevelKronusAccess().getRule();
	}

	//Kronus:
	//	{Kronus} imports+=ImportDef* includes+=IncludeDef* defs+=AbstractDef* (RETURN return=ValueOperation)?;
	public KronusElements getKronusAccess() {
		return pKronus;
	}
	
	public ParserRule getKronusRule() {
		return getKronusAccess().getRule();
	}

	//AbstractDef:
	//	TypeDef | AnnotationDef | HashtagDef | FunctionDef | ValDef;
	public AbstractDefElements getAbstractDefAccess() {
		return pAbstractDef;
	}
	
	public ParserRule getAbstractDefRule() {
		return getAbstractDefAccess().getRule();
	}

	//ReferenceableDefs:
	//	FunctionDef | ValDef | ParameterDef;
	public ReferenceableDefsElements getReferenceableDefsAccess() {
		return pReferenceableDefs;
	}
	
	public ParserRule getReferenceableDefsRule() {
		return getReferenceableDefsAccess().getRule();
	}

	//ValDef:
	//	hashtags+=HashtagCall* annotations+=AnnotationCall* VAL name=CAPITALIZED_ID KRONUS_ASSIGN value=ValueOperation;
	public ValDefElements getValDefAccess() {
		return pValDef;
	}
	
	public ParserRule getValDefRule() {
		return getValDefAccess().getRule();
	}

	//PackageDef:
	//	PACKAGE module=ModuleParts;
	public PackageDefElements getPackageDefAccess() {
		return pPackageDef;
	}
	
	public ParserRule getPackageDefRule() {
		return getPackageDefAccess().getRule();
	}

	//ImportDef:
	//	IMPORT module=ModuleDef;
	public ImportDefElements getImportDefAccess() {
		return pImportDef;
	}
	
	public ParserRule getImportDefRule() {
		return getImportDefAccess().getRule();
	}

	//IncludeDef:
	//	INCLUDE module=ModuleDef (AS name=CAPITALIZED_ID)?;
	public IncludeDefElements getIncludeDefAccess() {
		return pIncludeDef;
	}
	
	public ParserRule getIncludeDefRule() {
		return getIncludeDefAccess().getRule();
	}

	//ModulePart:
	//	ID | Keywords;
	public ModulePartElements getModulePartAccess() {
		return pModulePart;
	}
	
	public ParserRule getModulePartRule() {
		return getModulePartAccess().getRule();
	}

	//ModuleDef hidden():
	//	ModuleParts ("." ("_" | ModuleLeaf))?;
	public ModuleDefElements getModuleDefAccess() {
		return pModuleDef;
	}
	
	public ParserRule getModuleDefRule() {
		return getModuleDefAccess().getRule();
	}

	//ModuleParts:
	//	ModulePart ("." ModulePart)*;
	public ModulePartsElements getModulePartsAccess() {
		return pModuleParts;
	}
	
	public ParserRule getModulePartsRule() {
		return getModulePartsAccess().getRule();
	}

	//ModuleLeaf hidden(WS):
	//	"{" ModuleLeafPart ("," ModuleLeafPart)* "}";
	public ModuleLeafElements getModuleLeafAccess() {
		return pModuleLeaf;
	}
	
	public ParserRule getModuleLeafRule() {
		return getModuleLeafAccess().getRule();
	}

	//ModuleLeafPart hidden(WS):
	//	ModulePart ("=>" ModulePart)?;
	public ModuleLeafPartElements getModuleLeafPartAccess() {
		return pModuleLeafPart;
	}
	
	public ParserRule getModuleLeafPartRule() {
		return getModuleLeafPartAccess().getRule();
	}

	//AS:
	//	"as";
	public ASElements getASAccess() {
		return pAS;
	}
	
	public ParserRule getASRule() {
		return getASAccess().getRule();
	}

	//DEF:
	//	"def";
	public DEFElements getDEFAccess() {
		return pDEF;
	}
	
	public ParserRule getDEFRule() {
		return getDEFAccess().getRule();
	}

	//FALSE:
	//	"false";
	public FALSEElements getFALSEAccess() {
		return pFALSE;
	}
	
	public ParserRule getFALSERule() {
		return getFALSEAccess().getRule();
	}

	//GENERATE:
	//	"generate";
	public GENERATEElements getGENERATEAccess() {
		return pGENERATE;
	}
	
	public ParserRule getGENERATERule() {
		return getGENERATEAccess().getRule();
	}

	//IMPORT:
	//	"import";
	public IMPORTElements getIMPORTAccess() {
		return pIMPORT;
	}
	
	public ParserRule getIMPORTRule() {
		return getIMPORTAccess().getRule();
	}

	//INCLUDE:
	//	"include";
	public INCLUDEElements getINCLUDEAccess() {
		return pINCLUDE;
	}
	
	public ParserRule getINCLUDERule() {
		return getINCLUDEAccess().getRule();
	}

	//KRONUSKW:
	//	"kronus";
	public KRONUSKWElements getKRONUSKWAccess() {
		return pKRONUSKW;
	}
	
	public ParserRule getKRONUSKWRule() {
		return getKRONUSKWAccess().getRule();
	}

	//PACKAGE:
	//	"package";
	public PACKAGEElements getPACKAGEAccess() {
		return pPACKAGE;
	}
	
	public ParserRule getPACKAGERule() {
		return getPACKAGEAccess().getRule();
	}

	//RETURN:
	//	"return";
	public RETURNElements getRETURNAccess() {
		return pRETURN;
	}
	
	public ParserRule getRETURNRule() {
		return getRETURNAccess().getRule();
	}

	//TRUE:
	//	"true";
	public TRUEElements getTRUEAccess() {
		return pTRUE;
	}
	
	public ParserRule getTRUERule() {
		return getTRUEAccess().getRule();
	}

	//TYPE:
	//	"type";
	public TYPEElements getTYPEAccess() {
		return pTYPE;
	}
	
	public ParserRule getTYPERule() {
		return getTYPEAccess().getRule();
	}

	//VAL:
	//	"val";
	public VALElements getVALAccess() {
		return pVAL;
	}
	
	public ParserRule getVALRule() {
		return getVALAccess().getRule();
	}

	//WITH:
	//	"with";
	public WITHElements getWITHAccess() {
		return pWITH;
	}
	
	public ParserRule getWITHRule() {
		return getWITHAccess().getRule();
	}

	//Keywords:
	//	AS | DEF | FALSE | GENERATE | IMPORT | INCLUDE | KRONUSKW | PACKAGE | RETURN | TRUE | TYPE | VAL | WITH;
	public KeywordsElements getKeywordsAccess() {
		return pKeywords;
	}
	
	public ParserRule getKeywordsRule() {
		return getKeywordsAccess().getRule();
	}

	//TypeParameter returns TypeDef:
	//	variance=("+" | "-")? name=CAPITALIZED_ID ("<:" boundsHi=TypeInstance)?;
	public TypeParameterElements getTypeParameterAccess() {
		return pTypeParameter;
	}
	
	public ParserRule getTypeParameterRule() {
		return getTypeParameterAccess().getRule();
	}

	//// type A
	//// type A = String
	//// type A[B]
	//// type A[B] = Seq[B]
	//TypeDef:
	//	TYPE name=CAPITALIZED_ID ("[" typeParameters+=TypeParameter ("," typeParameters+=TypeParameter)* "]")? (KRONUS_ASSIGN
	//	value=TypeValue)?;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//TypeValue hidden(WS):
	//	TypeValueAtomic (WITH extensions+=TypeValueAtomic)*;
	public TypeValueElements getTypeValueAccess() {
		return pTypeValue;
	}
	
	public ParserRule getTypeValueRule() {
		return getTypeValueAccess().getRule();
	}

	//TypeValueAtomic returns TypeValue:
	//	type=TypeId ("[" parms+=TypeValue ("," parms+=TypeValue)* "]")?;
	public TypeValueAtomicElements getTypeValueAtomicAccess() {
		return pTypeValueAtomic;
	}
	
	public ParserRule getTypeValueAtomicRule() {
		return getTypeValueAtomicAccess().getRule();
	}

	//TypeNameStr hidden():
	//	"_" | ID ("." ID)* ("." "_")?;
	public TypeNameStrElements getTypeNameStrAccess() {
		return pTypeNameStr;
	}
	
	public ParserRule getTypeNameStrRule() {
		return getTypeNameStrAccess().getRule();
	}

	//TypeName:
	//	name=TypeNameStr;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}

	//TypeRef hidden():
	//	"$" typeRef=[TypeDef];
	public TypeRefElements getTypeRefAccess() {
		return pTypeRef;
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	//TypeId:
	//	TypeName | TypeRef;
	public TypeIdElements getTypeIdAccess() {
		return pTypeId;
	}
	
	public ParserRule getTypeIdRule() {
		return getTypeIdAccess().getRule();
	}

	//// def A(a:String)
	//// def A[O](a:List[O]):O
	//// def A[O](a:List[List[O]]):O
	//TypeInstance:
	//	name=[TypeDef] ("[" typeParameters+=TypeInstance ("," typeParameters+=TypeInstance)* "]")?;
	public TypeInstanceElements getTypeInstanceAccess() {
		return pTypeInstance;
	}
	
	public ParserRule getTypeInstanceRule() {
		return getTypeInstanceAccess().getRule();
	}

	//FunctionDef:
	//	hashtags+=HashtagCall* DEF name=CAPITALIZED_ID ("[" typeParameters+=TypeParameter (","
	//	typeParameters+=TypeParameter)* "]")? "(" (parameterDefs+=ParameterDef ("," parameterDefs+=ParameterDef)*)? ")" ":"
	//	returnType=TypeInstance value=CodeAssignment?;
	public FunctionDefElements getFunctionDefAccess() {
		return pFunctionDef;
	}
	
	public ParserRule getFunctionDefRule() {
		return getFunctionDefAccess().getRule();
	}

	//AnnotationDef:
	//	DEF "@" name=CAPITALIZED_ID "(" (parameterDefs+=ParameterDef ("," parameterDefs+=ParameterDef)*)? ")";
	public AnnotationDefElements getAnnotationDefAccess() {
		return pAnnotationDef;
	}
	
	public ParserRule getAnnotationDefRule() {
		return getAnnotationDefAccess().getRule();
	}

	//HashtagDef:
	//	DEF "#" name=CAPITALIZED_ID "(" (parameterDefs+=ParameterDef ("," parameterDefs+=ParameterDef)*)? ")";
	public HashtagDefElements getHashtagDefAccess() {
		return pHashtagDef;
	}
	
	public ParserRule getHashtagDefRule() {
		return getHashtagDefAccess().getRule();
	}

	//CodeAssignment:
	//	KRONUS_ASSIGN CodeBlock;
	public CodeAssignmentElements getCodeAssignmentAccess() {
		return pCodeAssignment;
	}
	
	public ParserRule getCodeAssignmentRule() {
		return getCodeAssignmentAccess().getRule();
	}

	//CodeBlock:
	//	ScalaCodeBlock | KronusCodeBlock;
	public CodeBlockElements getCodeBlockAccess() {
		return pCodeBlock;
	}
	
	public ParserRule getCodeBlockRule() {
		return getCodeBlockAccess().getRule();
	}

	//ScalaCodeBlock:
	//	GENERATE "(" type=STRING ")" codeStr=SCALA_CODE_BLOCK;
	public ScalaCodeBlockElements getScalaCodeBlockAccess() {
		return pScalaCodeBlock;
	}
	
	public ParserRule getScalaCodeBlockRule() {
		return getScalaCodeBlockAccess().getRule();
	}

	//KronusCodeBlock:
	//	type=KRONUSKW? "{" code=Kronus "}";
	public KronusCodeBlockElements getKronusCodeBlockAccess() {
		return pKronusCodeBlock;
	}
	
	public ParserRule getKronusCodeBlockRule() {
		return getKronusCodeBlockAccess().getRule();
	}

	//SimpleParameterValue:
	//	name=ID KRONUS_ASSIGN value=STRING;
	public SimpleParameterValueElements getSimpleParameterValueAccess() {
		return pSimpleParameterValue;
	}
	
	public ParserRule getSimpleParameterValueRule() {
		return getSimpleParameterValueAccess().getRule();
	}

	//HashtagCall:
	//	"#" method=[HashtagDef] "(" (parameterValues+=SimpleParameterValue ("," parameterValues+=SimpleParameterValue)*)?
	//	")";
	public HashtagCallElements getHashtagCallAccess() {
		return pHashtagCall;
	}
	
	public ParserRule getHashtagCallRule() {
		return getHashtagCallAccess().getRule();
	}

	//AnnotationCall:
	//	"@" method=[AnnotationDef] "(" (parameterValues+=ParameterValue ("," parameterValues+=ParameterValue)*)? ")";
	public AnnotationCallElements getAnnotationCallAccess() {
		return pAnnotationCall;
	}
	
	public ParserRule getAnnotationCallRule() {
		return getAnnotationCallAccess().getRule();
	}

	//ParameterDef:
	//	name=ID ":" byName?="=>"? type=TypeInstance list?="*"? (KRONUS_ASSIGN defaultValue=ValueOperation)?;
	public ParameterDefElements getParameterDefAccess() {
		return pParameterDef;
	}
	
	public ParserRule getParameterDefRule() {
		return getParameterDefAccess().getRule();
	}

	//ParameterValue:
	//	KeywordParameterValue | PositionParameterValue;
	public ParameterValueElements getParameterValueAccess() {
		return pParameterValue;
	}
	
	public ParserRule getParameterValueRule() {
		return getParameterValueAccess().getRule();
	}

	//KeywordParameterValue:
	//	name=ID KRONUS_ASSIGN value=ValueOperation;
	public KeywordParameterValueElements getKeywordParameterValueAccess() {
		return pKeywordParameterValue;
	}
	
	public ParserRule getKeywordParameterValueRule() {
		return getKeywordParameterValueAccess().getRule();
	}

	//PositionParameterValue:
	//	value=ValueOperation;
	public PositionParameterValueElements getPositionParameterValueAccess() {
		return pPositionParameterValue;
	}
	
	public ParserRule getPositionParameterValueRule() {
		return getPositionParameterValueAccess().getRule();
	}

	//Primary returns Expression:
	//	Value | "(" ValueOperation ")";
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Value:
	//	Sequence | ValRef | FunctionCall | IncludeRef | StringLiteral | DoubleLiteral | IntegerLiteral | BooleanLiteral |
	//	CodeBlock;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Sequence:
	//	{Sequence} "[" (values+=ValueOperation ("," values+=ValueOperation)*)? "]";
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//ValRef:
	//	ref=[ReferenceableDefs];
	public ValRefElements getValRefAccess() {
		return pValRef;
	}
	
	public ParserRule getValRefRule() {
		return getValRefAccess().getRule();
	}

	//FunctionCall:
	//	method=[FunctionDef] "(" (parameterValues+=ParameterValue ("," parameterValues+=ParameterValue)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//IncludeRef:
	//	include=[IncludeDef] "." ref=(ValRef | FunctionCall);
	public IncludeRefElements getIncludeRefAccess() {
		return pIncludeRef;
	}
	
	public ParserRule getIncludeRefRule() {
		return getIncludeRefAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//DoubleLiteral:
	//	value=DOUBLE;
	public DoubleLiteralElements getDoubleLiteralAccess() {
		return pDoubleLiteral;
	}
	
	public ParserRule getDoubleLiteralRule() {
		return getDoubleLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//	value=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	value=BOOLEAN;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//UnaryOperation returns Expression:
	//	{UnaryOperation} op=UNARY_OPS expr=UnaryOrPrimary;
	public UnaryOperationElements getUnaryOperationAccess() {
		return pUnaryOperation;
	}
	
	public ParserRule getUnaryOperationRule() {
		return getUnaryOperationAccess().getRule();
	}

	//UnaryOrPrimary returns Expression:
	//	Primary | UnaryOperation;
	public UnaryOrPrimaryElements getUnaryOrPrimaryAccess() {
		return pUnaryOrPrimary;
	}
	
	public ParserRule getUnaryOrPrimaryRule() {
		return getUnaryOrPrimaryAccess().getRule();
	}

	//BinaryOperation1 returns Expression:
	//	UnaryOrPrimary ({BinaryOperation.left=current} op=BINARY_OPS_1 right=UnaryOrPrimary)*;
	public BinaryOperation1Elements getBinaryOperation1Access() {
		return pBinaryOperation1;
	}
	
	public ParserRule getBinaryOperation1Rule() {
		return getBinaryOperation1Access().getRule();
	}

	//BinaryOperation2 returns Expression:
	//	BinaryOperation1 ({BinaryOperation.left=current} op=BINARY_OPS_2 right=BinaryOperation1)*;
	public BinaryOperation2Elements getBinaryOperation2Access() {
		return pBinaryOperation2;
	}
	
	public ParserRule getBinaryOperation2Rule() {
		return getBinaryOperation2Access().getRule();
	}

	//BinaryOperation3 returns Expression:
	//	BinaryOperation2 ({BinaryOperation.left=current} op=BINARY_OPS_3 right=BinaryOperation2)*;
	public BinaryOperation3Elements getBinaryOperation3Access() {
		return pBinaryOperation3;
	}
	
	public ParserRule getBinaryOperation3Rule() {
		return getBinaryOperation3Access().getRule();
	}

	//BinaryOperation4 returns Expression:
	//	BinaryOperation3 ({BinaryOperation.left=current} op=BINARY_OPS_4 right=BinaryOperation3)*;
	public BinaryOperation4Elements getBinaryOperation4Access() {
		return pBinaryOperation4;
	}
	
	public ParserRule getBinaryOperation4Rule() {
		return getBinaryOperation4Access().getRule();
	}

	//BinaryOperation5 returns Expression:
	//	BinaryOperation4 ({BinaryOperation.left=current} op=BINARY_OPS_5 right=BinaryOperation4)*;
	public BinaryOperation5Elements getBinaryOperation5Access() {
		return pBinaryOperation5;
	}
	
	public ParserRule getBinaryOperation5Rule() {
		return getBinaryOperation5Access().getRule();
	}

	//ValueOperation returns Expression:
	//	BinaryOperation5 ({BinaryOperation.left=current} op=BINARY_OPS_6 right=BinaryOperation5)*;
	public ValueOperationElements getValueOperationAccess() {
		return pValueOperation;
	}
	
	public ParserRule getValueOperationRule() {
		return getValueOperationAccess().getRule();
	}

	//UNARY_ONLY_OPS:
	//	"!";
	public UNARY_ONLY_OPSElements getUNARY_ONLY_OPSAccess() {
		return pUNARY_ONLY_OPS;
	}
	
	public ParserRule getUNARY_ONLY_OPSRule() {
		return getUNARY_ONLY_OPSAccess().getRule();
	}

	//UNARY_OPS:
	//	UNARY_ONLY_OPS | "-";
	public UNARY_OPSElements getUNARY_OPSAccess() {
		return pUNARY_OPS;
	}
	
	public ParserRule getUNARY_OPSRule() {
		return getUNARY_OPSAccess().getRule();
	}

	//BINARY_OPS_1:
	//	"*" | "/";
	public BINARY_OPS_1Elements getBINARY_OPS_1Access() {
		return pBINARY_OPS_1;
	}
	
	public ParserRule getBINARY_OPS_1Rule() {
		return getBINARY_OPS_1Access().getRule();
	}

	//BINARY_OPS_2:
	//	"+" | "-";
	public BINARY_OPS_2Elements getBINARY_OPS_2Access() {
		return pBINARY_OPS_2;
	}
	
	public ParserRule getBINARY_OPS_2Rule() {
		return getBINARY_OPS_2Access().getRule();
	}

	//BINARY_OPS_3:
	//	"<" | "<=" | ">" | ">=";
	public BINARY_OPS_3Elements getBINARY_OPS_3Access() {
		return pBINARY_OPS_3;
	}
	
	public ParserRule getBINARY_OPS_3Rule() {
		return getBINARY_OPS_3Access().getRule();
	}

	//BINARY_OPS_4:
	//	"==" | "!=";
	public BINARY_OPS_4Elements getBINARY_OPS_4Access() {
		return pBINARY_OPS_4;
	}
	
	public ParserRule getBINARY_OPS_4Rule() {
		return getBINARY_OPS_4Access().getRule();
	}

	//BINARY_OPS_5:
	//	"&&";
	public BINARY_OPS_5Elements getBINARY_OPS_5Access() {
		return pBINARY_OPS_5;
	}
	
	public ParserRule getBINARY_OPS_5Rule() {
		return getBINARY_OPS_5Access().getRule();
	}

	//BINARY_OPS_6:
	//	"||";
	public BINARY_OPS_6Elements getBINARY_OPS_6Access() {
		return pBINARY_OPS_6;
	}
	
	public ParserRule getBINARY_OPS_6Rule() {
		return getBINARY_OPS_6Access().getRule();
	}

	//NOT_A_BRACKET hidden():
	//	UNARY_ONLY_OPS | BINARY_OPS_1 | BINARY_OPS_2 | BINARY_OPS_3 | BINARY_OPS_4 | BINARY_OPS_5 | BINARY_OPS_6 | "#" | "$"
	//	| "%" | "&" | "," | "." | ":" | ";" | KRONUS_ASSIGN | "?" | "@" | "\\" | "^" | "_" | "`" | "|" | "~" | "<-" | "=>" |
	//	WS | INT | ID | TRIPPLE_STRING | ML_COMMENT | SL_COMMENT | Keywords;
	public NOT_A_BRACKETElements getNOT_A_BRACKETAccess() {
		return pNOT_A_BRACKET;
	}
	
	public ParserRule getNOT_A_BRACKETRule() {
		return getNOT_A_BRACKETAccess().getRule();
	}

	//SQUIGGLY_BRACKET_BLOCK hidden():
	//	"{" BRACKET_BLOCK_CENTER "}";
	public SQUIGGLY_BRACKET_BLOCKElements getSQUIGGLY_BRACKET_BLOCKAccess() {
		return pSQUIGGLY_BRACKET_BLOCK;
	}
	
	public ParserRule getSQUIGGLY_BRACKET_BLOCKRule() {
		return getSQUIGGLY_BRACKET_BLOCKAccess().getRule();
	}

	//ROUND_BRACKET_BLOCK hidden():
	//	"(" BRACKET_BLOCK_CENTER ")";
	public ROUND_BRACKET_BLOCKElements getROUND_BRACKET_BLOCKAccess() {
		return pROUND_BRACKET_BLOCK;
	}
	
	public ParserRule getROUND_BRACKET_BLOCKRule() {
		return getROUND_BRACKET_BLOCKAccess().getRule();
	}

	//SQUARE_BRACKET_BLOCK hidden():
	//	"[" BRACKET_BLOCK_CENTER "]";
	public SQUARE_BRACKET_BLOCKElements getSQUARE_BRACKET_BLOCKAccess() {
		return pSQUARE_BRACKET_BLOCK;
	}
	
	public ParserRule getSQUARE_BRACKET_BLOCKRule() {
		return getSQUARE_BRACKET_BLOCKAccess().getRule();
	}

	//BRACKET_BLOCK_CENTER hidden():
	//	(NOT_A_BRACKET | SQUIGGLY_BRACKET_BLOCK | ROUND_BRACKET_BLOCK | SQUARE_BRACKET_BLOCK | STRING)*;
	public BRACKET_BLOCK_CENTERElements getBRACKET_BLOCK_CENTERAccess() {
		return pBRACKET_BLOCK_CENTER;
	}
	
	public ParserRule getBRACKET_BLOCK_CENTERRule() {
		return getBRACKET_BLOCK_CENTERAccess().getRule();
	}

	//SCALA_CODE_BLOCK hidden():
	//	SQUIGGLY_BRACKET_BLOCK;
	public SCALA_CODE_BLOCKElements getSCALA_CODE_BLOCKAccess() {
		return pSCALA_CODE_BLOCK;
	}
	
	public ParserRule getSCALA_CODE_BLOCKRule() {
		return getSCALA_CODE_BLOCKAccess().getRule();
	}

	//BOOLEAN returns ecore::EBoolean:
	//	TRUE | FALSE;
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}

	//DOUBLE returns ecore::EDouble:
	//	INT "." INT;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}

	//ID:
	//	CAPITALIZED_ID | OTHER_ID;
	public IDElements getIDAccess() {
		return pID;
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	//terminal KRONUS_ASSIGN:
	//	"=";
	public TerminalRule getKRONUS_ASSIGNRule() {
		return tKRONUS_ASSIGN;
	} 

	//terminal CAPITALIZED_ID:
	//	("A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getCAPITALIZED_IDRule() {
		return tCAPITALIZED_ID;
	} 

	//terminal OTHER_ID:
	//	"a".."z" ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getOTHER_IDRule() {
		return tOTHER_ID;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal TRIPPLE_STRING:
	//	"\"\"\""->"\"\"\"";
	public TerminalRule getTRIPPLE_STRINGRule() {
		return tTRIPPLE_STRING;
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 
}
