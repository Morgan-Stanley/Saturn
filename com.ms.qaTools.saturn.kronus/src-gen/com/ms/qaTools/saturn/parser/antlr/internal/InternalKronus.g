/*
* generated by Xtext
*/
grammar InternalKronus;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.ms.qaTools.saturn.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.ms.qaTools.saturn.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.ms.qaTools.saturn.services.KronusGrammarAccess;

}

@parser::members {

 	private KronusGrammarAccess grammarAccess;
 	
    public InternalKronusParser(TokenStream input, KronusGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "TopLevelKronus";	
   	}
   	
   	@Override
   	protected KronusGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTopLevelKronus
entryRuleTopLevelKronus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTopLevelKronusRule()); }
	 iv_ruleTopLevelKronus=ruleTopLevelKronus 
	 { $current=$iv_ruleTopLevelKronus.current; } 
	 EOF 
;

// Rule TopLevelKronus
ruleTopLevelKronus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTopLevelKronusAccess().getPackagePackageDefParserRuleCall_0_0()); 
	    }
		lv_package_0_0=rulePackageDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTopLevelKronusRule());
	        }
       		set(
       			$current, 
       			"package",
        		lv_package_0_0, 
        		"PackageDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTopLevelKronusAccess().getKronusKronusParserRuleCall_1_0()); 
	    }
		lv_kronus_1_0=ruleKronus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTopLevelKronusRule());
	        }
       		set(
       			$current, 
       			"kronus",
        		lv_kronus_1_0, 
        		"Kronus");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleKronus
entryRuleKronus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKronusRule()); }
	 iv_ruleKronus=ruleKronus 
	 { $current=$iv_ruleKronus.current; } 
	 EOF 
;

// Rule Kronus
ruleKronus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getKronusAccess().getKronusAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKronusAccess().getImportsImportDefParserRuleCall_1_0()); 
	    }
		lv_imports_1_0=ruleImportDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKronusRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_1_0, 
        		"ImportDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getKronusAccess().getIncludesIncludeDefParserRuleCall_2_0()); 
	    }
		lv_includes_2_0=ruleIncludeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKronusRule());
	        }
       		add(
       			$current, 
       			"includes",
        		lv_includes_2_0, 
        		"IncludeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getKronusAccess().getDefsAbstractDefParserRuleCall_3_0()); 
	    }
		lv_defs_3_0=ruleAbstractDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKronusRule());
	        }
       		add(
       			$current, 
       			"defs",
        		lv_defs_3_0, 
        		"AbstractDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
    { 
        newCompositeNode(grammarAccess.getKronusAccess().getRETURNParserRuleCall_4_0()); 
    }
ruleRETURN
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKronusAccess().getReturnValueOperationParserRuleCall_4_1_0()); 
	    }
		lv_return_5_0=ruleValueOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKronusRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_5_0, 
        		"ValueOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAbstractDef
entryRuleAbstractDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractDefRule()); }
	 iv_ruleAbstractDef=ruleAbstractDef 
	 { $current=$iv_ruleAbstractDef.current; } 
	 EOF 
;

// Rule AbstractDef
ruleAbstractDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractDefAccess().getTypeDefParserRuleCall_0()); 
    }
    this_TypeDef_0=ruleTypeDef
    { 
        $current = $this_TypeDef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractDefAccess().getAnnotationDefParserRuleCall_1()); 
    }
    this_AnnotationDef_1=ruleAnnotationDef
    { 
        $current = $this_AnnotationDef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractDefAccess().getHashtagDefParserRuleCall_2()); 
    }
    this_HashtagDef_2=ruleHashtagDef
    { 
        $current = $this_HashtagDef_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractDefAccess().getFunctionDefParserRuleCall_3()); 
    }
    this_FunctionDef_3=ruleFunctionDef
    { 
        $current = $this_FunctionDef_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractDefAccess().getValDefParserRuleCall_4()); 
    }
    this_ValDef_4=ruleValDef
    { 
        $current = $this_ValDef_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleValDef
entryRuleValDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValDefRule()); }
	 iv_ruleValDef=ruleValDef 
	 { $current=$iv_ruleValDef.current; } 
	 EOF 
;

// Rule ValDef
ruleValDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getValDefAccess().getHashtagsHashtagCallParserRuleCall_0_0()); 
	    }
		lv_hashtags_0_0=ruleHashtagCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValDefRule());
	        }
       		add(
       			$current, 
       			"hashtags",
        		lv_hashtags_0_0, 
        		"HashtagCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getValDefAccess().getAnnotationsAnnotationCallParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotationCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValDefRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"AnnotationCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*
    { 
        newCompositeNode(grammarAccess.getValDefAccess().getVALParserRuleCall_2()); 
    }
ruleVAL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_3_0=RULE_CAPITALIZED_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getValDefAccess().getNameCAPITALIZED_IDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"CAPITALIZED_ID");
	    }

)
)this_KRONUS_ASSIGN_4=RULE_KRONUS_ASSIGN
    { 
    newLeafNode(this_KRONUS_ASSIGN_4, grammarAccess.getValDefAccess().getKRONUS_ASSIGNTerminalRuleCall_4()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValDefAccess().getValueValueOperationParserRuleCall_5_0()); 
	    }
		lv_value_5_0=ruleValueOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValDefRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"ValueOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePackageDef
entryRulePackageDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDefRule()); }
	 iv_rulePackageDef=rulePackageDef 
	 { $current=$iv_rulePackageDef.current; } 
	 EOF 
;

// Rule PackageDef
rulePackageDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPackageDefAccess().getPACKAGEParserRuleCall_0()); 
    }
rulePACKAGE
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDefAccess().getModuleModulePartsParserRuleCall_1_0()); 
	    }
		lv_module_1_0=ruleModuleParts		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDefRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_1_0, 
        		"ModuleParts");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleImportDef
entryRuleImportDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportDefRule()); }
	 iv_ruleImportDef=ruleImportDef 
	 { $current=$iv_ruleImportDef.current; } 
	 EOF 
;

// Rule ImportDef
ruleImportDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImportDefAccess().getIMPORTParserRuleCall_0()); 
    }
ruleIMPORT
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportDefAccess().getModuleModuleDefParserRuleCall_1_0()); 
	    }
		lv_module_1_0=ruleModuleDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportDefRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_1_0, 
        		"ModuleDef");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIncludeDef
entryRuleIncludeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncludeDefRule()); }
	 iv_ruleIncludeDef=ruleIncludeDef 
	 { $current=$iv_ruleIncludeDef.current; } 
	 EOF 
;

// Rule IncludeDef
ruleIncludeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIncludeDefAccess().getINCLUDEParserRuleCall_0()); 
    }
ruleINCLUDE
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIncludeDefAccess().getModuleModuleDefParserRuleCall_1_0()); 
	    }
		lv_module_1_0=ruleModuleDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIncludeDefRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_1_0, 
        		"ModuleDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getIncludeDefAccess().getASParserRuleCall_2_0()); 
    }
ruleAS
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_3_0=RULE_CAPITALIZED_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getIncludeDefAccess().getNameCAPITALIZED_IDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"CAPITALIZED_ID");
	    }

)
))?)
;





// Entry rule entryRuleModulePart
entryRuleModulePart returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModulePartRule()); } 
	 iv_ruleModulePart=ruleModulePart 
	 { $current=$iv_ruleModulePart.current.getText(); }  
	 EOF 
;

// Rule ModulePart
ruleModulePart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModulePartAccess().getIDParserRuleCall_0()); 
    }
    this_ID_0=ruleID    {
		$current.merge(this_ID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModulePartAccess().getKeywordsParserRuleCall_1()); 
    }
    this_Keywords_1=ruleKeywords    {
		$current.merge(this_Keywords_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleModuleDef
entryRuleModuleDef returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getModuleDefRule()); } 
	 iv_ruleModuleDef=ruleModuleDef 
	 { $current=$iv_ruleModuleDef.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ModuleDef
ruleModuleDef returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModuleDefAccess().getModulePartsParserRuleCall_0()); 
    }
    this_ModuleParts_0=ruleModuleParts    {
		$current.merge(this_ModuleParts_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModuleDefAccess().getFullStopKeyword_1_0()); 
    }
(
	kw='_' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModuleDefAccess().get_Keyword_1_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleDefAccess().getModuleLeafParserRuleCall_1_1_1()); 
    }
    this_ModuleLeaf_3=ruleModuleLeaf    {
		$current.merge(this_ModuleLeaf_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))?)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleModuleParts
entryRuleModuleParts returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModulePartsRule()); } 
	 iv_ruleModuleParts=ruleModuleParts 
	 { $current=$iv_ruleModuleParts.current.getText(); }  
	 EOF 
;

// Rule ModuleParts
ruleModuleParts returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModulePartsAccess().getModulePartParserRuleCall_0()); 
    }
    this_ModulePart_0=ruleModulePart    {
		$current.merge(this_ModulePart_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModulePartsAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getModulePartsAccess().getModulePartParserRuleCall_1_1()); 
    }
    this_ModulePart_2=ruleModulePart    {
		$current.merge(this_ModulePart_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleModuleLeaf
entryRuleModuleLeaf returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getModuleLeafRule()); } 
	 iv_ruleModuleLeaf=ruleModuleLeaf 
	 { $current=$iv_ruleModuleLeaf.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ModuleLeaf
ruleModuleLeaf returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModuleLeafAccess().getLeftCurlyBracketKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getModuleLeafAccess().getModuleLeafPartParserRuleCall_1()); 
    }
    this_ModuleLeafPart_1=ruleModuleLeafPart    {
		$current.merge(this_ModuleLeafPart_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModuleLeafAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getModuleLeafAccess().getModuleLeafPartParserRuleCall_2_1()); 
    }
    this_ModuleLeafPart_3=ruleModuleLeafPart    {
		$current.merge(this_ModuleLeafPart_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModuleLeafAccess().getRightCurlyBracketKeyword_3()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleModuleLeafPart
entryRuleModuleLeafPart returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getModuleLeafPartRule()); } 
	 iv_ruleModuleLeafPart=ruleModuleLeafPart 
	 { $current=$iv_ruleModuleLeafPart.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ModuleLeafPart
ruleModuleLeafPart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModuleLeafPartAccess().getModulePartParserRuleCall_0()); 
    }
    this_ModulePart_0=ruleModulePart    {
		$current.merge(this_ModulePart_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='=>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModuleLeafPartAccess().getEqualsSignGreaterThanSignKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getModuleLeafPartAccess().getModulePartParserRuleCall_1_1()); 
    }
    this_ModulePart_2=ruleModulePart    {
		$current.merge(this_ModulePart_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAS
entryRuleAS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getASRule()); } 
	 iv_ruleAS=ruleAS 
	 { $current=$iv_ruleAS.current.getText(); }  
	 EOF 
;

// Rule AS
ruleAS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='as' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getASAccess().getAsKeyword()); 
    }

    ;





// Entry rule entryRuleDEF
entryRuleDEF returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDEFRule()); } 
	 iv_ruleDEF=ruleDEF 
	 { $current=$iv_ruleDEF.current.getText(); }  
	 EOF 
;

// Rule DEF
ruleDEF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='def' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDEFAccess().getDefKeyword()); 
    }

    ;





// Entry rule entryRuleFALSE
entryRuleFALSE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFALSERule()); } 
	 iv_ruleFALSE=ruleFALSE 
	 { $current=$iv_ruleFALSE.current.getText(); }  
	 EOF 
;

// Rule FALSE
ruleFALSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFALSEAccess().getFalseKeyword()); 
    }

    ;





// Entry rule entryRuleGENERATE
entryRuleGENERATE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGENERATERule()); } 
	 iv_ruleGENERATE=ruleGENERATE 
	 { $current=$iv_ruleGENERATE.current.getText(); }  
	 EOF 
;

// Rule GENERATE
ruleGENERATE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='generate' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGENERATEAccess().getGenerateKeyword()); 
    }

    ;





// Entry rule entryRuleIMPORT
entryRuleIMPORT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIMPORTRule()); } 
	 iv_ruleIMPORT=ruleIMPORT 
	 { $current=$iv_ruleIMPORT.current.getText(); }  
	 EOF 
;

// Rule IMPORT
ruleIMPORT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='import' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIMPORTAccess().getImportKeyword()); 
    }

    ;





// Entry rule entryRuleINCLUDE
entryRuleINCLUDE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getINCLUDERule()); } 
	 iv_ruleINCLUDE=ruleINCLUDE 
	 { $current=$iv_ruleINCLUDE.current.getText(); }  
	 EOF 
;

// Rule INCLUDE
ruleINCLUDE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='include' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getINCLUDEAccess().getIncludeKeyword()); 
    }

    ;





// Entry rule entryRuleKRONUSKW
entryRuleKRONUSKW returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getKRONUSKWRule()); } 
	 iv_ruleKRONUSKW=ruleKRONUSKW 
	 { $current=$iv_ruleKRONUSKW.current.getText(); }  
	 EOF 
;

// Rule KRONUSKW
ruleKRONUSKW returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='kronus' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKRONUSKWAccess().getKronusKeyword()); 
    }

    ;





// Entry rule entryRulePACKAGE
entryRulePACKAGE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPACKAGERule()); } 
	 iv_rulePACKAGE=rulePACKAGE 
	 { $current=$iv_rulePACKAGE.current.getText(); }  
	 EOF 
;

// Rule PACKAGE
rulePACKAGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='package' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPACKAGEAccess().getPackageKeyword()); 
    }

    ;





// Entry rule entryRuleRETURN
entryRuleRETURN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRETURNRule()); } 
	 iv_ruleRETURN=ruleRETURN 
	 { $current=$iv_ruleRETURN.current.getText(); }  
	 EOF 
;

// Rule RETURN
ruleRETURN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='return' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURNAccess().getReturnKeyword()); 
    }

    ;





// Entry rule entryRuleTRUE
entryRuleTRUE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTRUERule()); } 
	 iv_ruleTRUE=ruleTRUE 
	 { $current=$iv_ruleTRUE.current.getText(); }  
	 EOF 
;

// Rule TRUE
ruleTRUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTRUEAccess().getTrueKeyword()); 
    }

    ;





// Entry rule entryRuleTYPE
entryRuleTYPE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTYPERule()); } 
	 iv_ruleTYPE=ruleTYPE 
	 { $current=$iv_ruleTYPE.current.getText(); }  
	 EOF 
;

// Rule TYPE
ruleTYPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTYPEAccess().getTypeKeyword()); 
    }

    ;





// Entry rule entryRuleVAL
entryRuleVAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVALRule()); } 
	 iv_ruleVAL=ruleVAL 
	 { $current=$iv_ruleVAL.current.getText(); }  
	 EOF 
;

// Rule VAL
ruleVAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='val' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVALAccess().getValKeyword()); 
    }

    ;





// Entry rule entryRuleWITH
entryRuleWITH returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getWITHRule()); } 
	 iv_ruleWITH=ruleWITH 
	 { $current=$iv_ruleWITH.current.getText(); }  
	 EOF 
;

// Rule WITH
ruleWITH returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='with' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWITHAccess().getWithKeyword()); 
    }

    ;





// Entry rule entryRuleKeywords
entryRuleKeywords returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeywordsRule()); } 
	 iv_ruleKeywords=ruleKeywords 
	 { $current=$iv_ruleKeywords.current.getText(); }  
	 EOF 
;

// Rule Keywords
ruleKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getKeywordsAccess().getASParserRuleCall_0()); 
    }
    this_AS_0=ruleAS    {
		$current.merge(this_AS_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKeywordsAccess().getDEFParserRuleCall_1()); 
    }
    this_DEF_1=ruleDEF    {
		$current.merge(this_DEF_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKeywordsAccess().getFALSEParserRuleCall_2()); 
    }
    this_FALSE_2=ruleFALSE    {
		$current.merge(this_FALSE_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKeywordsAccess().getGENERATEParserRuleCall_3()); 
    }
    this_GENERATE_3=ruleGENERATE    {
		$current.merge(this_GENERATE_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKeywordsAccess().getIMPORTParserRuleCall_4()); 
    }
    this_IMPORT_4=ruleIMPORT    {
		$current.merge(this_IMPORT_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKeywordsAccess().getINCLUDEParserRuleCall_5()); 
    }
    this_INCLUDE_5=ruleINCLUDE    {
		$current.merge(this_INCLUDE_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKeywordsAccess().getKRONUSKWParserRuleCall_6()); 
    }
    this_KRONUSKW_6=ruleKRONUSKW    {
		$current.merge(this_KRONUSKW_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKeywordsAccess().getPACKAGEParserRuleCall_7()); 
    }
    this_PACKAGE_7=rulePACKAGE    {
		$current.merge(this_PACKAGE_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKeywordsAccess().getRETURNParserRuleCall_8()); 
    }
    this_RETURN_8=ruleRETURN    {
		$current.merge(this_RETURN_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKeywordsAccess().getTRUEParserRuleCall_9()); 
    }
    this_TRUE_9=ruleTRUE    {
		$current.merge(this_TRUE_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKeywordsAccess().getTYPEParserRuleCall_10()); 
    }
    this_TYPE_10=ruleTYPE    {
		$current.merge(this_TYPE_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKeywordsAccess().getVALParserRuleCall_11()); 
    }
    this_VAL_11=ruleVAL    {
		$current.merge(this_VAL_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKeywordsAccess().getWITHParserRuleCall_12()); 
    }
    this_WITH_12=ruleWITH    {
		$current.merge(this_WITH_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleTypeParameter
entryRuleTypeParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeParameterRule()); }
	 iv_ruleTypeParameter=ruleTypeParameter 
	 { $current=$iv_ruleTypeParameter.current; } 
	 EOF 
;

// Rule TypeParameter
ruleTypeParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_variance_0_1=	'+' 
    {
        newLeafNode(lv_variance_0_1, grammarAccess.getTypeParameterAccess().getVariancePlusSignKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeParameterRule());
	        }
       		setWithLastConsumed($current, "variance", lv_variance_0_1, null);
	    }

    |		lv_variance_0_2=	'-' 
    {
        newLeafNode(lv_variance_0_2, grammarAccess.getTypeParameterAccess().getVarianceHyphenMinusKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeParameterRule());
	        }
       		setWithLastConsumed($current, "variance", lv_variance_0_2, null);
	    }

)

)
)?(
(
		lv_name_1_0=RULE_CAPITALIZED_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeParameterAccess().getNameCAPITALIZED_IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"CAPITALIZED_ID");
	    }

)
)(	otherlv_2='<:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeParameterAccess().getLessThanSignColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeParameterAccess().getBoundsHiTypeInstanceParserRuleCall_2_1_0()); 
	    }
		lv_boundsHi_3_0=ruleTypeInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeParameterRule());
	        }
       		set(
       			$current, 
       			"boundsHi",
        		lv_boundsHi_3_0, 
        		"TypeInstance");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	 iv_ruleTypeDef=ruleTypeDef 
	 { $current=$iv_ruleTypeDef.current; } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getTYPEParserRuleCall_0()); 
    }
ruleTYPE
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_1_0=RULE_CAPITALIZED_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeDefAccess().getNameCAPITALIZED_IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"CAPITALIZED_ID");
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDefAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getTypeParametersTypeParameterParserRuleCall_2_1_0()); 
	    }
		lv_typeParameters_3_0=ruleTypeParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		add(
       			$current, 
       			"typeParameters",
        		lv_typeParameters_3_0, 
        		"TypeParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeDefAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getTypeParametersTypeParameterParserRuleCall_2_2_1_0()); 
	    }
		lv_typeParameters_5_0=ruleTypeParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		add(
       			$current, 
       			"typeParameters",
        		lv_typeParameters_5_0, 
        		"TypeParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypeDefAccess().getRightSquareBracketKeyword_2_3());
    }
)?(this_KRONUS_ASSIGN_7=RULE_KRONUS_ASSIGN
    { 
    newLeafNode(this_KRONUS_ASSIGN_7, grammarAccess.getTypeDefAccess().getKRONUS_ASSIGNTerminalRuleCall_3_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getValueTypeValueParserRuleCall_3_1_0()); 
	    }
		lv_value_8_0=ruleTypeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_8_0, 
        		"TypeValue");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTypeValue
entryRuleTypeValue returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getTypeValueRule()); }
	 iv_ruleTypeValue=ruleTypeValue 
	 { $current=$iv_ruleTypeValue.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TypeValue
ruleTypeValue returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeValueAccess().getTypeValueAtomicParserRuleCall_0()); 
    }
    this_TypeValueAtomic_0=ruleTypeValueAtomic
    { 
        $current = $this_TypeValueAtomic_0.current; 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getTypeValueAccess().getWITHParserRuleCall_1_0()); 
    }
ruleWITH
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeValueAccess().getExtensionsTypeValueAtomicParserRuleCall_1_1_0()); 
	    }
		lv_extensions_2_0=ruleTypeValueAtomic		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeValueRule());
	        }
       		add(
       			$current, 
       			"extensions",
        		lv_extensions_2_0, 
        		"TypeValueAtomic");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTypeValueAtomic
entryRuleTypeValueAtomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeValueAtomicRule()); }
	 iv_ruleTypeValueAtomic=ruleTypeValueAtomic 
	 { $current=$iv_ruleTypeValueAtomic.current; } 
	 EOF 
;

// Rule TypeValueAtomic
ruleTypeValueAtomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeValueAtomicAccess().getTypeTypeIdParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleTypeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeValueAtomicRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"TypeId");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeValueAtomicAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeValueAtomicAccess().getParmsTypeValueParserRuleCall_1_1_0()); 
	    }
		lv_parms_2_0=ruleTypeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeValueAtomicRule());
	        }
       		add(
       			$current, 
       			"parms",
        		lv_parms_2_0, 
        		"TypeValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeValueAtomicAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeValueAtomicAccess().getParmsTypeValueParserRuleCall_1_2_1_0()); 
	    }
		lv_parms_4_0=ruleTypeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeValueAtomicRule());
	        }
       		add(
       			$current, 
       			"parms",
        		lv_parms_4_0, 
        		"TypeValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeValueAtomicAccess().getRightSquareBracketKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleTypeNameStr
entryRuleTypeNameStr returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getTypeNameStrRule()); } 
	 iv_ruleTypeNameStr=ruleTypeNameStr 
	 { $current=$iv_ruleTypeNameStr.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TypeNameStr
ruleTypeNameStr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
	kw='_' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeNameStrAccess().get_Keyword_0()); 
    }

    |(
    { 
        newCompositeNode(grammarAccess.getTypeNameStrAccess().getIDParserRuleCall_1_0()); 
    }
    this_ID_1=ruleID    {
		$current.merge(this_ID_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeNameStrAccess().getFullStopKeyword_1_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTypeNameStrAccess().getIDParserRuleCall_1_1_1()); 
    }
    this_ID_3=ruleID    {
		$current.merge(this_ID_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeNameStrAccess().getFullStopKeyword_1_2_0()); 
    }

	kw='_' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeNameStrAccess().get_Keyword_1_2_1()); 
    }
)?))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTypeName
entryRuleTypeName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	 iv_ruleTypeName=ruleTypeName 
	 { $current=$iv_ruleTypeName.current; } 
	 EOF 
;

// Rule TypeName
ruleTypeName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeNameAccess().getNameTypeNameStrParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleTypeNameStr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TypeNameStr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTypeRef
entryRuleTypeRef returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getTypeRefRule()); }
	 iv_ruleTypeRef=ruleTypeRef 
	 { $current=$iv_ruleTypeRef.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TypeRef
ruleTypeRef returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(	otherlv_0='$' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeRefAccess().getDollarSignKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTypeRefAccess().getTypeRefTypeDefCrossReference_1_0()); 
	    }
		ruleID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTypeId
entryRuleTypeId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeIdRule()); }
	 iv_ruleTypeId=ruleTypeId 
	 { $current=$iv_ruleTypeId.current; } 
	 EOF 
;

// Rule TypeId
ruleTypeId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeIdAccess().getTypeNameParserRuleCall_0()); 
    }
    this_TypeName_0=ruleTypeName
    { 
        $current = $this_TypeName_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeIdAccess().getTypeRefParserRuleCall_1()); 
    }
    this_TypeRef_1=ruleTypeRef
    { 
        $current = $this_TypeRef_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypeInstance
entryRuleTypeInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeInstanceRule()); }
	 iv_ruleTypeInstance=ruleTypeInstance 
	 { $current=$iv_ruleTypeInstance.current; } 
	 EOF 
;

// Rule TypeInstance
ruleTypeInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeInstanceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTypeInstanceAccess().getNameTypeDefCrossReference_0_0()); 
	    }
		ruleID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeInstanceAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeInstanceAccess().getTypeParametersTypeInstanceParserRuleCall_1_1_0()); 
	    }
		lv_typeParameters_2_0=ruleTypeInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeInstanceRule());
	        }
       		add(
       			$current, 
       			"typeParameters",
        		lv_typeParameters_2_0, 
        		"TypeInstance");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeInstanceAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeInstanceAccess().getTypeParametersTypeInstanceParserRuleCall_1_2_1_0()); 
	    }
		lv_typeParameters_4_0=ruleTypeInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeInstanceRule());
	        }
       		add(
       			$current, 
       			"typeParameters",
        		lv_typeParameters_4_0, 
        		"TypeInstance");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeInstanceAccess().getRightSquareBracketKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleFunctionDef
entryRuleFunctionDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDefRule()); }
	 iv_ruleFunctionDef=ruleFunctionDef 
	 { $current=$iv_ruleFunctionDef.current; } 
	 EOF 
;

// Rule FunctionDef
ruleFunctionDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefAccess().getHashtagsHashtagCallParserRuleCall_0_0()); 
	    }
		lv_hashtags_0_0=ruleHashtagCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefRule());
	        }
       		add(
       			$current, 
       			"hashtags",
        		lv_hashtags_0_0, 
        		"HashtagCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*
    { 
        newCompositeNode(grammarAccess.getFunctionDefAccess().getDEFParserRuleCall_1()); 
    }
ruleDEF
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_2_0=RULE_CAPITALIZED_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFunctionDefAccess().getNameCAPITALIZED_IDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"CAPITALIZED_ID");
	    }

)
)(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDefAccess().getLeftSquareBracketKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefAccess().getTypeParametersTypeParameterParserRuleCall_3_1_0()); 
	    }
		lv_typeParameters_4_0=ruleTypeParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefRule());
	        }
       		add(
       			$current, 
       			"typeParameters",
        		lv_typeParameters_4_0, 
        		"TypeParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionDefAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefAccess().getTypeParametersTypeParameterParserRuleCall_3_2_1_0()); 
	    }
		lv_typeParameters_6_0=ruleTypeParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefRule());
	        }
       		add(
       			$current, 
       			"typeParameters",
        		lv_typeParameters_6_0, 
        		"TypeParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionDefAccess().getRightSquareBracketKeyword_3_3());
    }
)?	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionDefAccess().getLeftParenthesisKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefAccess().getParameterDefsParameterDefParserRuleCall_5_0_0()); 
	    }
		lv_parameterDefs_9_0=ruleParameterDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefRule());
	        }
       		add(
       			$current, 
       			"parameterDefs",
        		lv_parameterDefs_9_0, 
        		"ParameterDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFunctionDefAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefAccess().getParameterDefsParameterDefParserRuleCall_5_1_1_0()); 
	    }
		lv_parameterDefs_11_0=ruleParameterDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefRule());
	        }
       		add(
       			$current, 
       			"parameterDefs",
        		lv_parameterDefs_11_0, 
        		"ParameterDef");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFunctionDefAccess().getRightParenthesisKeyword_6());
    }
	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getFunctionDefAccess().getColonKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefAccess().getReturnTypeTypeInstanceParserRuleCall_8_0()); 
	    }
		lv_returnType_14_0=ruleTypeInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_14_0, 
        		"TypeInstance");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefAccess().getValueCodeAssignmentParserRuleCall_9_0()); 
	    }
		lv_value_15_0=ruleCodeAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_15_0, 
        		"CodeAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAnnotationDef
entryRuleAnnotationDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationDefRule()); }
	 iv_ruleAnnotationDef=ruleAnnotationDef 
	 { $current=$iv_ruleAnnotationDef.current; } 
	 EOF 
;

// Rule AnnotationDef
ruleAnnotationDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAnnotationDefAccess().getDEFParserRuleCall_0()); 
    }
ruleDEF
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_1='@' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationDefAccess().getCommercialAtKeyword_1());
    }
(
(
		lv_name_2_0=RULE_CAPITALIZED_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAnnotationDefAccess().getNameCAPITALIZED_IDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"CAPITALIZED_ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnnotationDefAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationDefAccess().getParameterDefsParameterDefParserRuleCall_4_0_0()); 
	    }
		lv_parameterDefs_4_0=ruleParameterDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationDefRule());
	        }
       		add(
       			$current, 
       			"parameterDefs",
        		lv_parameterDefs_4_0, 
        		"ParameterDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAnnotationDefAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationDefAccess().getParameterDefsParameterDefParserRuleCall_4_1_1_0()); 
	    }
		lv_parameterDefs_6_0=ruleParameterDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationDefRule());
	        }
       		add(
       			$current, 
       			"parameterDefs",
        		lv_parameterDefs_6_0, 
        		"ParameterDef");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAnnotationDefAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleHashtagDef
entryRuleHashtagDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHashtagDefRule()); }
	 iv_ruleHashtagDef=ruleHashtagDef 
	 { $current=$iv_ruleHashtagDef.current; } 
	 EOF 
;

// Rule HashtagDef
ruleHashtagDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getHashtagDefAccess().getDEFParserRuleCall_0()); 
    }
ruleDEF
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHashtagDefAccess().getNumberSignKeyword_1());
    }
(
(
		lv_name_2_0=RULE_CAPITALIZED_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getHashtagDefAccess().getNameCAPITALIZED_IDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHashtagDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"CAPITALIZED_ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getHashtagDefAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getHashtagDefAccess().getParameterDefsParameterDefParserRuleCall_4_0_0()); 
	    }
		lv_parameterDefs_4_0=ruleParameterDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHashtagDefRule());
	        }
       		add(
       			$current, 
       			"parameterDefs",
        		lv_parameterDefs_4_0, 
        		"ParameterDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getHashtagDefAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHashtagDefAccess().getParameterDefsParameterDefParserRuleCall_4_1_1_0()); 
	    }
		lv_parameterDefs_6_0=ruleParameterDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHashtagDefRule());
	        }
       		add(
       			$current, 
       			"parameterDefs",
        		lv_parameterDefs_6_0, 
        		"ParameterDef");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getHashtagDefAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleCodeAssignment
entryRuleCodeAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCodeAssignmentRule()); }
	 iv_ruleCodeAssignment=ruleCodeAssignment 
	 { $current=$iv_ruleCodeAssignment.current; } 
	 EOF 
;

// Rule CodeAssignment
ruleCodeAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_KRONUS_ASSIGN_0=RULE_KRONUS_ASSIGN
    { 
    newLeafNode(this_KRONUS_ASSIGN_0, grammarAccess.getCodeAssignmentAccess().getKRONUS_ASSIGNTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCodeAssignmentAccess().getCodeBlockParserRuleCall_1()); 
    }
    this_CodeBlock_1=ruleCodeBlock
    { 
        $current = $this_CodeBlock_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCodeBlock
entryRuleCodeBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCodeBlockRule()); }
	 iv_ruleCodeBlock=ruleCodeBlock 
	 { $current=$iv_ruleCodeBlock.current; } 
	 EOF 
;

// Rule CodeBlock
ruleCodeBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCodeBlockAccess().getScalaCodeBlockParserRuleCall_0()); 
    }
    this_ScalaCodeBlock_0=ruleScalaCodeBlock
    { 
        $current = $this_ScalaCodeBlock_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCodeBlockAccess().getKronusCodeBlockParserRuleCall_1()); 
    }
    this_KronusCodeBlock_1=ruleKronusCodeBlock
    { 
        $current = $this_KronusCodeBlock_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleScalaCodeBlock
entryRuleScalaCodeBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScalaCodeBlockRule()); }
	 iv_ruleScalaCodeBlock=ruleScalaCodeBlock 
	 { $current=$iv_ruleScalaCodeBlock.current; } 
	 EOF 
;

// Rule ScalaCodeBlock
ruleScalaCodeBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getScalaCodeBlockAccess().getGENERATEParserRuleCall_0()); 
    }
ruleGENERATE
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getScalaCodeBlockAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_type_2_0=RULE_STRING
		{
			newLeafNode(lv_type_2_0, grammarAccess.getScalaCodeBlockAccess().getTypeSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScalaCodeBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getScalaCodeBlockAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScalaCodeBlockAccess().getCodeStrSCALA_CODE_BLOCKParserRuleCall_4_0()); 
	    }
		lv_codeStr_4_0=ruleSCALA_CODE_BLOCK		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScalaCodeBlockRule());
	        }
       		set(
       			$current, 
       			"codeStr",
        		lv_codeStr_4_0, 
        		"SCALA_CODE_BLOCK");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleKronusCodeBlock
entryRuleKronusCodeBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKronusCodeBlockRule()); }
	 iv_ruleKronusCodeBlock=ruleKronusCodeBlock 
	 { $current=$iv_ruleKronusCodeBlock.current; } 
	 EOF 
;

// Rule KronusCodeBlock
ruleKronusCodeBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getKronusCodeBlockAccess().getTypeKRONUSKWParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleKRONUSKW		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKronusCodeBlockRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"KRONUSKW");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getKronusCodeBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKronusCodeBlockAccess().getCodeKronusParserRuleCall_2_0()); 
	    }
		lv_code_2_0=ruleKronus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKronusCodeBlockRule());
	        }
       		set(
       			$current, 
       			"code",
        		lv_code_2_0, 
        		"Kronus");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKronusCodeBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleSimpleParameterValue
entryRuleSimpleParameterValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleParameterValueRule()); }
	 iv_ruleSimpleParameterValue=ruleSimpleParameterValue 
	 { $current=$iv_ruleSimpleParameterValue.current; } 
	 EOF 
;

// Rule SimpleParameterValue
ruleSimpleParameterValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleParameterValueAccess().getNameIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleParameterValueRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	        afterParserOrEnumRuleCall();
	    }

)
)this_KRONUS_ASSIGN_1=RULE_KRONUS_ASSIGN
    { 
    newLeafNode(this_KRONUS_ASSIGN_1, grammarAccess.getSimpleParameterValueAccess().getKRONUS_ASSIGNTerminalRuleCall_1()); 
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getSimpleParameterValueAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleParameterValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleHashtagCall
entryRuleHashtagCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHashtagCallRule()); }
	 iv_ruleHashtagCall=ruleHashtagCall 
	 { $current=$iv_ruleHashtagCall.current; } 
	 EOF 
;

// Rule HashtagCall
ruleHashtagCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHashtagCallAccess().getNumberSignKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getHashtagCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getHashtagCallAccess().getMethodHashtagDefCrossReference_1_0()); 
	    }
		ruleID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getHashtagCallAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getHashtagCallAccess().getParameterValuesSimpleParameterValueParserRuleCall_3_0_0()); 
	    }
		lv_parameterValues_3_0=ruleSimpleParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHashtagCallRule());
	        }
       		add(
       			$current, 
       			"parameterValues",
        		lv_parameterValues_3_0, 
        		"SimpleParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getHashtagCallAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHashtagCallAccess().getParameterValuesSimpleParameterValueParserRuleCall_3_1_1_0()); 
	    }
		lv_parameterValues_5_0=ruleSimpleParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHashtagCallRule());
	        }
       		add(
       			$current, 
       			"parameterValues",
        		lv_parameterValues_5_0, 
        		"SimpleParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getHashtagCallAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleAnnotationCall
entryRuleAnnotationCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationCallRule()); }
	 iv_ruleAnnotationCall=ruleAnnotationCall 
	 { $current=$iv_ruleAnnotationCall.current; } 
	 EOF 
;

// Rule AnnotationCall
ruleAnnotationCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationCallAccess().getCommercialAtKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAnnotationCallAccess().getMethodAnnotationDefCrossReference_1_0()); 
	    }
		ruleID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnnotationCallAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationCallAccess().getParameterValuesParameterValueParserRuleCall_3_0_0()); 
	    }
		lv_parameterValues_3_0=ruleParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationCallRule());
	        }
       		add(
       			$current, 
       			"parameterValues",
        		lv_parameterValues_3_0, 
        		"ParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAnnotationCallAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationCallAccess().getParameterValuesParameterValueParserRuleCall_3_1_1_0()); 
	    }
		lv_parameterValues_5_0=ruleParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationCallRule());
	        }
       		add(
       			$current, 
       			"parameterValues",
        		lv_parameterValues_5_0, 
        		"ParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAnnotationCallAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleParameterDef
entryRuleParameterDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterDefRule()); }
	 iv_ruleParameterDef=ruleParameterDef 
	 { $current=$iv_ruleParameterDef.current; } 
	 EOF 
;

// Rule ParameterDef
ruleParameterDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterDefAccess().getNameIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterDefRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterDefAccess().getColonKeyword_1());
    }
(
(
		lv_byName_2_0=	'=>' 
    {
        newLeafNode(lv_byName_2_0, grammarAccess.getParameterDefAccess().getByNameEqualsSignGreaterThanSignKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDefRule());
	        }
       		setWithLastConsumed($current, "byName", true, "=>");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterDefAccess().getTypeTypeInstanceParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleTypeInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterDefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"TypeInstance");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_list_4_0=	'*' 
    {
        newLeafNode(lv_list_4_0, grammarAccess.getParameterDefAccess().getListAsteriskKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDefRule());
	        }
       		setWithLastConsumed($current, "list", true, "*");
	    }

)
)?(this_KRONUS_ASSIGN_5=RULE_KRONUS_ASSIGN
    { 
    newLeafNode(this_KRONUS_ASSIGN_5, grammarAccess.getParameterDefAccess().getKRONUS_ASSIGNTerminalRuleCall_5_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterDefAccess().getDefaultValueValueOperationParserRuleCall_5_1_0()); 
	    }
		lv_defaultValue_6_0=ruleValueOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterDefRule());
	        }
       		set(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_6_0, 
        		"ValueOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleParameterValue
entryRuleParameterValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterValueRule()); }
	 iv_ruleParameterValue=ruleParameterValue 
	 { $current=$iv_ruleParameterValue.current; } 
	 EOF 
;

// Rule ParameterValue
ruleParameterValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterValueAccess().getKeywordParameterValueParserRuleCall_0()); 
    }
    this_KeywordParameterValue_0=ruleKeywordParameterValue
    { 
        $current = $this_KeywordParameterValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterValueAccess().getPositionParameterValueParserRuleCall_1()); 
    }
    this_PositionParameterValue_1=rulePositionParameterValue
    { 
        $current = $this_PositionParameterValue_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleKeywordParameterValue
entryRuleKeywordParameterValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeywordParameterValueRule()); }
	 iv_ruleKeywordParameterValue=ruleKeywordParameterValue 
	 { $current=$iv_ruleKeywordParameterValue.current; } 
	 EOF 
;

// Rule KeywordParameterValue
ruleKeywordParameterValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getKeywordParameterValueAccess().getNameIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeywordParameterValueRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	        afterParserOrEnumRuleCall();
	    }

)
)this_KRONUS_ASSIGN_1=RULE_KRONUS_ASSIGN
    { 
    newLeafNode(this_KRONUS_ASSIGN_1, grammarAccess.getKeywordParameterValueAccess().getKRONUS_ASSIGNTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeywordParameterValueAccess().getValueValueOperationParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValueOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeywordParameterValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ValueOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePositionParameterValue
entryRulePositionParameterValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPositionParameterValueRule()); }
	 iv_rulePositionParameterValue=rulePositionParameterValue 
	 { $current=$iv_rulePositionParameterValue.current; } 
	 EOF 
;

// Rule PositionParameterValue
rulePositionParameterValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPositionParameterValueAccess().getValueValueOperationParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleValueOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPositionParameterValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"ValueOperation");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getValueParserRuleCall_0()); 
    }
    this_Value_0=ruleValue
    { 
        $current = $this_Value_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getValueOperationParserRuleCall_1_1()); 
    }
    this_ValueOperation_2=ruleValueOperation
    { 
        $current = $this_ValueOperation_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getSequenceParserRuleCall_0()); 
    }
    this_Sequence_0=ruleSequence
    { 
        $current = $this_Sequence_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getValRefParserRuleCall_1()); 
    }
    this_ValRef_1=ruleValRef
    { 
        $current = $this_ValRef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getFunctionCallParserRuleCall_2()); 
    }
    this_FunctionCall_2=ruleFunctionCall
    { 
        $current = $this_FunctionCall_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getIncludeRefParserRuleCall_3()); 
    }
    this_IncludeRef_3=ruleIncludeRef
    { 
        $current = $this_IncludeRef_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getStringLiteralParserRuleCall_4()); 
    }
    this_StringLiteral_4=ruleStringLiteral
    { 
        $current = $this_StringLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getDoubleLiteralParserRuleCall_5()); 
    }
    this_DoubleLiteral_5=ruleDoubleLiteral
    { 
        $current = $this_DoubleLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getIntegerLiteralParserRuleCall_6()); 
    }
    this_IntegerLiteral_6=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getBooleanLiteralParserRuleCall_7()); 
    }
    this_BooleanLiteral_7=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getCodeBlockParserRuleCall_8()); 
    }
    this_CodeBlock_8=ruleCodeBlock
    { 
        $current = $this_CodeBlock_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceRule()); }
	 iv_ruleSequence=ruleSequence 
	 { $current=$iv_ruleSequence.current; } 
	 EOF 
;

// Rule Sequence
ruleSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSequenceAccess().getSequenceAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSequenceAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getValuesValueOperationParserRuleCall_2_0_0()); 
	    }
		lv_values_2_0=ruleValueOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"ValueOperation");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSequenceAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getValuesValueOperationParserRuleCall_2_1_1_0()); 
	    }
		lv_values_4_0=ruleValueOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"ValueOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSequenceAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleValRef
entryRuleValRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValRefRule()); }
	 iv_ruleValRef=ruleValRef 
	 { $current=$iv_ruleValRef.current; } 
	 EOF 
;

// Rule ValRef
ruleValRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getValRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getValRefAccess().getRefReferenceableDefsCrossReference_0()); 
	    }
		ruleID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getMethodFunctionDefCrossReference_0_0()); 
	    }
		ruleID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getParameterValuesParameterValueParserRuleCall_2_0_0()); 
	    }
		lv_parameterValues_2_0=ruleParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"parameterValues",
        		lv_parameterValues_2_0, 
        		"ParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getParameterValuesParameterValueParserRuleCall_2_1_1_0()); 
	    }
		lv_parameterValues_4_0=ruleParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"parameterValues",
        		lv_parameterValues_4_0, 
        		"ParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleIncludeRef
entryRuleIncludeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncludeRefRule()); }
	 iv_ruleIncludeRef=ruleIncludeRef 
	 { $current=$iv_ruleIncludeRef.current; } 
	 EOF 
;

// Rule IncludeRef
ruleIncludeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getIncludeRefAccess().getIncludeIncludeDefCrossReference_0_0()); 
	    }
		ruleID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIncludeRefAccess().getFullStopKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getIncludeRefAccess().getRefValRefParserRuleCall_2_0_0()); 
	    }
		lv_ref_2_1=ruleValRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIncludeRefRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_2_1, 
        		"ValRef");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getIncludeRefAccess().getRefFunctionCallParserRuleCall_2_0_1()); 
	    }
		lv_ref_2_2=ruleFunctionCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIncludeRefRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_2_2, 
        		"FunctionCall");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleDoubleLiteral
entryRuleDoubleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleLiteralRule()); }
	 iv_ruleDoubleLiteral=ruleDoubleLiteral 
	 { $current=$iv_ruleDoubleLiteral.current; } 
	 EOF 
;

// Rule DoubleLiteral
ruleDoubleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoubleLiteralAccess().getValueDOUBLEParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoubleLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleBOOLEAN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BOOLEAN");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOperationRule()); }
	 iv_ruleUnaryOperation=ruleUnaryOperation 
	 { $current=$iv_ruleUnaryOperation.current; } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryOperationAccess().getOpUNARY_OPSParserRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleUNARY_OPS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"UNARY_OPS");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryOperationAccess().getExprUnaryOrPrimaryParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleUnaryOrPrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"UnaryOrPrimary");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnaryOrPrimary
entryRuleUnaryOrPrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOrPrimaryRule()); }
	 iv_ruleUnaryOrPrimary=ruleUnaryOrPrimary 
	 { $current=$iv_ruleUnaryOrPrimary.current; } 
	 EOF 
;

// Rule UnaryOrPrimary
ruleUnaryOrPrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnaryOrPrimaryAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnaryOrPrimaryAccess().getUnaryOperationParserRuleCall_1()); 
    }
    this_UnaryOperation_1=ruleUnaryOperation
    { 
        $current = $this_UnaryOperation_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBinaryOperation1
entryRuleBinaryOperation1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryOperation1Rule()); }
	 iv_ruleBinaryOperation1=ruleBinaryOperation1 
	 { $current=$iv_ruleBinaryOperation1.current; } 
	 EOF 
;

// Rule BinaryOperation1
ruleBinaryOperation1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinaryOperation1Access().getUnaryOrPrimaryParserRuleCall_0()); 
    }
    this_UnaryOrPrimary_0=ruleUnaryOrPrimary
    { 
        $current = $this_UnaryOrPrimary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinaryOperation1Access().getBinaryOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOperation1Access().getOpBINARY_OPS_1ParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleBINARY_OPS_1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOperation1Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"BINARY_OPS_1");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOperation1Access().getRightUnaryOrPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleUnaryOrPrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOperation1Rule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UnaryOrPrimary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBinaryOperation2
entryRuleBinaryOperation2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryOperation2Rule()); }
	 iv_ruleBinaryOperation2=ruleBinaryOperation2 
	 { $current=$iv_ruleBinaryOperation2.current; } 
	 EOF 
;

// Rule BinaryOperation2
ruleBinaryOperation2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinaryOperation2Access().getBinaryOperation1ParserRuleCall_0()); 
    }
    this_BinaryOperation1_0=ruleBinaryOperation1
    { 
        $current = $this_BinaryOperation1_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinaryOperation2Access().getBinaryOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOperation2Access().getOpBINARY_OPS_2ParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleBINARY_OPS_2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOperation2Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"BINARY_OPS_2");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOperation2Access().getRightBinaryOperation1ParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBinaryOperation1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOperation2Rule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BinaryOperation1");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBinaryOperation3
entryRuleBinaryOperation3 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryOperation3Rule()); }
	 iv_ruleBinaryOperation3=ruleBinaryOperation3 
	 { $current=$iv_ruleBinaryOperation3.current; } 
	 EOF 
;

// Rule BinaryOperation3
ruleBinaryOperation3 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinaryOperation3Access().getBinaryOperation2ParserRuleCall_0()); 
    }
    this_BinaryOperation2_0=ruleBinaryOperation2
    { 
        $current = $this_BinaryOperation2_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinaryOperation3Access().getBinaryOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOperation3Access().getOpBINARY_OPS_3ParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleBINARY_OPS_3		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOperation3Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"BINARY_OPS_3");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOperation3Access().getRightBinaryOperation2ParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBinaryOperation2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOperation3Rule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BinaryOperation2");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBinaryOperation4
entryRuleBinaryOperation4 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryOperation4Rule()); }
	 iv_ruleBinaryOperation4=ruleBinaryOperation4 
	 { $current=$iv_ruleBinaryOperation4.current; } 
	 EOF 
;

// Rule BinaryOperation4
ruleBinaryOperation4 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinaryOperation4Access().getBinaryOperation3ParserRuleCall_0()); 
    }
    this_BinaryOperation3_0=ruleBinaryOperation3
    { 
        $current = $this_BinaryOperation3_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinaryOperation4Access().getBinaryOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOperation4Access().getOpBINARY_OPS_4ParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleBINARY_OPS_4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOperation4Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"BINARY_OPS_4");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOperation4Access().getRightBinaryOperation3ParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBinaryOperation3		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOperation4Rule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BinaryOperation3");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBinaryOperation5
entryRuleBinaryOperation5 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryOperation5Rule()); }
	 iv_ruleBinaryOperation5=ruleBinaryOperation5 
	 { $current=$iv_ruleBinaryOperation5.current; } 
	 EOF 
;

// Rule BinaryOperation5
ruleBinaryOperation5 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinaryOperation5Access().getBinaryOperation4ParserRuleCall_0()); 
    }
    this_BinaryOperation4_0=ruleBinaryOperation4
    { 
        $current = $this_BinaryOperation4_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinaryOperation5Access().getBinaryOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOperation5Access().getOpBINARY_OPS_5ParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleBINARY_OPS_5		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOperation5Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"BINARY_OPS_5");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOperation5Access().getRightBinaryOperation4ParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBinaryOperation4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOperation5Rule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BinaryOperation4");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleValueOperation
entryRuleValueOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueOperationRule()); }
	 iv_ruleValueOperation=ruleValueOperation 
	 { $current=$iv_ruleValueOperation.current; } 
	 EOF 
;

// Rule ValueOperation
ruleValueOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueOperationAccess().getBinaryOperation5ParserRuleCall_0()); 
    }
    this_BinaryOperation5_0=ruleBinaryOperation5
    { 
        $current = $this_BinaryOperation5_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getValueOperationAccess().getBinaryOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValueOperationAccess().getOpBINARY_OPS_6ParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleBINARY_OPS_6		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"BINARY_OPS_6");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValueOperationAccess().getRightBinaryOperation5ParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBinaryOperation5		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueOperationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BinaryOperation5");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUNARY_ONLY_OPS
entryRuleUNARY_ONLY_OPS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUNARY_ONLY_OPSRule()); } 
	 iv_ruleUNARY_ONLY_OPS=ruleUNARY_ONLY_OPS 
	 { $current=$iv_ruleUNARY_ONLY_OPS.current.getText(); }  
	 EOF 
;

// Rule UNARY_ONLY_OPS
ruleUNARY_ONLY_OPS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUNARY_ONLY_OPSAccess().getExclamationMarkKeyword()); 
    }

    ;





// Entry rule entryRuleUNARY_OPS
entryRuleUNARY_OPS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUNARY_OPSRule()); } 
	 iv_ruleUNARY_OPS=ruleUNARY_OPS 
	 { $current=$iv_ruleUNARY_OPS.current.getText(); }  
	 EOF 
;

// Rule UNARY_OPS
ruleUNARY_OPS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUNARY_OPSAccess().getUNARY_ONLY_OPSParserRuleCall_0()); 
    }
    this_UNARY_ONLY_OPS_0=ruleUNARY_ONLY_OPS    {
		$current.merge(this_UNARY_ONLY_OPS_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUNARY_OPSAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBINARY_OPS_1
entryRuleBINARY_OPS_1 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBINARY_OPS_1Rule()); } 
	 iv_ruleBINARY_OPS_1=ruleBINARY_OPS_1 
	 { $current=$iv_ruleBINARY_OPS_1.current.getText(); }  
	 EOF 
;

// Rule BINARY_OPS_1
ruleBINARY_OPS_1 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY_OPS_1Access().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY_OPS_1Access().getSolidusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBINARY_OPS_2
entryRuleBINARY_OPS_2 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBINARY_OPS_2Rule()); } 
	 iv_ruleBINARY_OPS_2=ruleBINARY_OPS_2 
	 { $current=$iv_ruleBINARY_OPS_2.current.getText(); }  
	 EOF 
;

// Rule BINARY_OPS_2
ruleBINARY_OPS_2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY_OPS_2Access().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY_OPS_2Access().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBINARY_OPS_3
entryRuleBINARY_OPS_3 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBINARY_OPS_3Rule()); } 
	 iv_ruleBINARY_OPS_3=ruleBINARY_OPS_3 
	 { $current=$iv_ruleBINARY_OPS_3.current.getText(); }  
	 EOF 
;

// Rule BINARY_OPS_3
ruleBINARY_OPS_3 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY_OPS_3Access().getLessThanSignKeyword_0()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY_OPS_3Access().getLessThanSignEqualsSignKeyword_1()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY_OPS_3Access().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY_OPS_3Access().getGreaterThanSignEqualsSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleBINARY_OPS_4
entryRuleBINARY_OPS_4 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBINARY_OPS_4Rule()); } 
	 iv_ruleBINARY_OPS_4=ruleBINARY_OPS_4 
	 { $current=$iv_ruleBINARY_OPS_4.current.getText(); }  
	 EOF 
;

// Rule BINARY_OPS_4
ruleBINARY_OPS_4 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY_OPS_4Access().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY_OPS_4Access().getExclamationMarkEqualsSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBINARY_OPS_5
entryRuleBINARY_OPS_5 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBINARY_OPS_5Rule()); } 
	 iv_ruleBINARY_OPS_5=ruleBINARY_OPS_5 
	 { $current=$iv_ruleBINARY_OPS_5.current.getText(); }  
	 EOF 
;

// Rule BINARY_OPS_5
ruleBINARY_OPS_5 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY_OPS_5Access().getAmpersandAmpersandKeyword()); 
    }

    ;





// Entry rule entryRuleBINARY_OPS_6
entryRuleBINARY_OPS_6 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBINARY_OPS_6Rule()); } 
	 iv_ruleBINARY_OPS_6=ruleBINARY_OPS_6 
	 { $current=$iv_ruleBINARY_OPS_6.current.getText(); }  
	 EOF 
;

// Rule BINARY_OPS_6
ruleBINARY_OPS_6 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY_OPS_6Access().getVerticalLineVerticalLineKeyword()); 
    }

    ;





// Entry rule entryRuleNOT_A_BRACKET
entryRuleNOT_A_BRACKET returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getNOT_A_BRACKETRule()); } 
	 iv_ruleNOT_A_BRACKET=ruleNOT_A_BRACKET 
	 { $current=$iv_ruleNOT_A_BRACKET.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule NOT_A_BRACKET
ruleNOT_A_BRACKET returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNOT_A_BRACKETAccess().getUNARY_ONLY_OPSParserRuleCall_0()); 
    }
    this_UNARY_ONLY_OPS_0=ruleUNARY_ONLY_OPS    {
		$current.merge(this_UNARY_ONLY_OPS_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNOT_A_BRACKETAccess().getBINARY_OPS_1ParserRuleCall_1()); 
    }
    this_BINARY_OPS_1_1=ruleBINARY_OPS_1    {
		$current.merge(this_BINARY_OPS_1_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNOT_A_BRACKETAccess().getBINARY_OPS_2ParserRuleCall_2()); 
    }
    this_BINARY_OPS_2_2=ruleBINARY_OPS_2    {
		$current.merge(this_BINARY_OPS_2_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNOT_A_BRACKETAccess().getBINARY_OPS_3ParserRuleCall_3()); 
    }
    this_BINARY_OPS_3_3=ruleBINARY_OPS_3    {
		$current.merge(this_BINARY_OPS_3_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNOT_A_BRACKETAccess().getBINARY_OPS_4ParserRuleCall_4()); 
    }
    this_BINARY_OPS_4_4=ruleBINARY_OPS_4    {
		$current.merge(this_BINARY_OPS_4_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNOT_A_BRACKETAccess().getBINARY_OPS_5ParserRuleCall_5()); 
    }
    this_BINARY_OPS_5_5=ruleBINARY_OPS_5    {
		$current.merge(this_BINARY_OPS_5_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNOT_A_BRACKETAccess().getBINARY_OPS_6ParserRuleCall_6()); 
    }
    this_BINARY_OPS_6_6=ruleBINARY_OPS_6    {
		$current.merge(this_BINARY_OPS_6_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getNumberSignKeyword_7()); 
    }

    |
	kw='$' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getDollarSignKeyword_8()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getPercentSignKeyword_9()); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getAmpersandKeyword_10()); 
    }

    |
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getCommaKeyword_11()); 
    }

    |
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getFullStopKeyword_12()); 
    }

    |
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getColonKeyword_13()); 
    }

    |
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getSemicolonKeyword_14()); 
    }

    |    this_KRONUS_ASSIGN_15=RULE_KRONUS_ASSIGN    {
		$current.merge(this_KRONUS_ASSIGN_15);
    }

    { 
    newLeafNode(this_KRONUS_ASSIGN_15, grammarAccess.getNOT_A_BRACKETAccess().getKRONUS_ASSIGNTerminalRuleCall_15()); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getQuestionMarkKeyword_16()); 
    }

    |
	kw='@' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getCommercialAtKeyword_17()); 
    }

    |
	kw='\\' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getReverseSolidusKeyword_18()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getCircumflexAccentKeyword_19()); 
    }

    |
	kw='_' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().get_Keyword_20()); 
    }

    |
	kw='`' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getGraveAccentKeyword_21()); 
    }

    |
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getVerticalLineKeyword_22()); 
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getTildeKeyword_23()); 
    }

    |
	kw='<-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getLessThanSignHyphenMinusKeyword_24()); 
    }

    |
	kw='=>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNOT_A_BRACKETAccess().getEqualsSignGreaterThanSignKeyword_25()); 
    }

    |    this_WS_26=RULE_WS    {
		$current.merge(this_WS_26);
    }

    { 
    newLeafNode(this_WS_26, grammarAccess.getNOT_A_BRACKETAccess().getWSTerminalRuleCall_26()); 
    }

    |    this_INT_27=RULE_INT    {
		$current.merge(this_INT_27);
    }

    { 
    newLeafNode(this_INT_27, grammarAccess.getNOT_A_BRACKETAccess().getINTTerminalRuleCall_27()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getNOT_A_BRACKETAccess().getIDParserRuleCall_28()); 
    }
    this_ID_28=ruleID    {
		$current.merge(this_ID_28);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_TRIPPLE_STRING_29=RULE_TRIPPLE_STRING    {
		$current.merge(this_TRIPPLE_STRING_29);
    }

    { 
    newLeafNode(this_TRIPPLE_STRING_29, grammarAccess.getNOT_A_BRACKETAccess().getTRIPPLE_STRINGTerminalRuleCall_29()); 
    }

    |    this_ML_COMMENT_30=RULE_ML_COMMENT    {
		$current.merge(this_ML_COMMENT_30);
    }

    { 
    newLeafNode(this_ML_COMMENT_30, grammarAccess.getNOT_A_BRACKETAccess().getML_COMMENTTerminalRuleCall_30()); 
    }

    |    this_SL_COMMENT_31=RULE_SL_COMMENT    {
		$current.merge(this_SL_COMMENT_31);
    }

    { 
    newLeafNode(this_SL_COMMENT_31, grammarAccess.getNOT_A_BRACKETAccess().getSL_COMMENTTerminalRuleCall_31()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getNOT_A_BRACKETAccess().getKeywordsParserRuleCall_32()); 
    }
    this_Keywords_32=ruleKeywords    {
		$current.merge(this_Keywords_32);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSQUIGGLY_BRACKET_BLOCK
entryRuleSQUIGGLY_BRACKET_BLOCK returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getSQUIGGLY_BRACKET_BLOCKRule()); } 
	 iv_ruleSQUIGGLY_BRACKET_BLOCK=ruleSQUIGGLY_BRACKET_BLOCK 
	 { $current=$iv_ruleSQUIGGLY_BRACKET_BLOCK.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SQUIGGLY_BRACKET_BLOCK
ruleSQUIGGLY_BRACKET_BLOCK returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSQUIGGLY_BRACKET_BLOCKAccess().getLeftCurlyBracketKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getSQUIGGLY_BRACKET_BLOCKAccess().getBRACKET_BLOCK_CENTERParserRuleCall_1()); 
    }
    this_BRACKET_BLOCK_CENTER_1=ruleBRACKET_BLOCK_CENTER    {
		$current.merge(this_BRACKET_BLOCK_CENTER_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSQUIGGLY_BRACKET_BLOCKAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleROUND_BRACKET_BLOCK
entryRuleROUND_BRACKET_BLOCK returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getROUND_BRACKET_BLOCKRule()); } 
	 iv_ruleROUND_BRACKET_BLOCK=ruleROUND_BRACKET_BLOCK 
	 { $current=$iv_ruleROUND_BRACKET_BLOCK.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ROUND_BRACKET_BLOCK
ruleROUND_BRACKET_BLOCK returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getROUND_BRACKET_BLOCKAccess().getLeftParenthesisKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getROUND_BRACKET_BLOCKAccess().getBRACKET_BLOCK_CENTERParserRuleCall_1()); 
    }
    this_BRACKET_BLOCK_CENTER_1=ruleBRACKET_BLOCK_CENTER    {
		$current.merge(this_BRACKET_BLOCK_CENTER_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getROUND_BRACKET_BLOCKAccess().getRightParenthesisKeyword_2()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSQUARE_BRACKET_BLOCK
entryRuleSQUARE_BRACKET_BLOCK returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getSQUARE_BRACKET_BLOCKRule()); } 
	 iv_ruleSQUARE_BRACKET_BLOCK=ruleSQUARE_BRACKET_BLOCK 
	 { $current=$iv_ruleSQUARE_BRACKET_BLOCK.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SQUARE_BRACKET_BLOCK
ruleSQUARE_BRACKET_BLOCK returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSQUARE_BRACKET_BLOCKAccess().getLeftSquareBracketKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getSQUARE_BRACKET_BLOCKAccess().getBRACKET_BLOCK_CENTERParserRuleCall_1()); 
    }
    this_BRACKET_BLOCK_CENTER_1=ruleBRACKET_BLOCK_CENTER    {
		$current.merge(this_BRACKET_BLOCK_CENTER_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSQUARE_BRACKET_BLOCKAccess().getRightSquareBracketKeyword_2()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleBRACKET_BLOCK_CENTER
entryRuleBRACKET_BLOCK_CENTER returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getBRACKET_BLOCK_CENTERRule()); } 
	 iv_ruleBRACKET_BLOCK_CENTER=ruleBRACKET_BLOCK_CENTER 
	 { $current=$iv_ruleBRACKET_BLOCK_CENTER.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule BRACKET_BLOCK_CENTER
ruleBRACKET_BLOCK_CENTER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBRACKET_BLOCK_CENTERAccess().getNOT_A_BRACKETParserRuleCall_0()); 
    }
    this_NOT_A_BRACKET_0=ruleNOT_A_BRACKET    {
		$current.merge(this_NOT_A_BRACKET_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBRACKET_BLOCK_CENTERAccess().getSQUIGGLY_BRACKET_BLOCKParserRuleCall_1()); 
    }
    this_SQUIGGLY_BRACKET_BLOCK_1=ruleSQUIGGLY_BRACKET_BLOCK    {
		$current.merge(this_SQUIGGLY_BRACKET_BLOCK_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBRACKET_BLOCK_CENTERAccess().getROUND_BRACKET_BLOCKParserRuleCall_2()); 
    }
    this_ROUND_BRACKET_BLOCK_2=ruleROUND_BRACKET_BLOCK    {
		$current.merge(this_ROUND_BRACKET_BLOCK_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBRACKET_BLOCK_CENTERAccess().getSQUARE_BRACKET_BLOCKParserRuleCall_3()); 
    }
    this_SQUARE_BRACKET_BLOCK_3=ruleSQUARE_BRACKET_BLOCK    {
		$current.merge(this_SQUARE_BRACKET_BLOCK_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_STRING_4=RULE_STRING    {
		$current.merge(this_STRING_4);
    }

    { 
    newLeafNode(this_STRING_4, grammarAccess.getBRACKET_BLOCK_CENTERAccess().getSTRINGTerminalRuleCall_4()); 
    }
)*
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSCALA_CODE_BLOCK
entryRuleSCALA_CODE_BLOCK returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getSCALA_CODE_BLOCKRule()); } 
	 iv_ruleSCALA_CODE_BLOCK=ruleSCALA_CODE_BLOCK 
	 { $current=$iv_ruleSCALA_CODE_BLOCK.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SCALA_CODE_BLOCK
ruleSCALA_CODE_BLOCK returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getSCALA_CODE_BLOCKAccess().getSQUIGGLY_BRACKET_BLOCKParserRuleCall()); 
    }
    this_SQUIGGLY_BRACKET_BLOCK_0=ruleSQUIGGLY_BRACKET_BLOCK    {
		$current.merge(this_SQUIGGLY_BRACKET_BLOCK_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLEANRule()); } 
	 iv_ruleBOOLEAN=ruleBOOLEAN 
	 { $current=$iv_ruleBOOLEAN.current.getText(); }  
	 EOF 
;

// Rule BOOLEAN
ruleBOOLEAN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBOOLEANAccess().getTRUEParserRuleCall_0()); 
    }
    this_TRUE_0=ruleTRUE    {
		$current.merge(this_TRUE_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBOOLEANAccess().getFALSEParserRuleCall_1()); 
    }
    this_FALSE_1=ruleFALSE    {
		$current.merge(this_FALSE_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); } 
	 iv_ruleDOUBLE=ruleDOUBLE 
	 { $current=$iv_ruleDOUBLE.current.getText(); }  
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDOUBLEAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleID
entryRuleID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIDRule()); } 
	 iv_ruleID=ruleID 
	 { $current=$iv_ruleID.current.getText(); }  
	 EOF 
;

// Rule ID
ruleID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_CAPITALIZED_ID_0=RULE_CAPITALIZED_ID    {
		$current.merge(this_CAPITALIZED_ID_0);
    }

    { 
    newLeafNode(this_CAPITALIZED_ID_0, grammarAccess.getIDAccess().getCAPITALIZED_IDTerminalRuleCall_0()); 
    }

    |    this_OTHER_ID_1=RULE_OTHER_ID    {
		$current.merge(this_OTHER_ID_1);
    }

    { 
    newLeafNode(this_OTHER_ID_1, grammarAccess.getIDAccess().getOTHER_IDTerminalRuleCall_1()); 
    }
)
    ;





RULE_KRONUS_ASSIGN : '=';

RULE_CAPITALIZED_ID : ('A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_OTHER_ID : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_TRIPPLE_STRING : '"""' ( options {greedy=false;} : . )*'"""';

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


