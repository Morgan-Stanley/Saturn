package com.ms.qaTools.kronus.rfb.functionRefs

type Unit
type String
type Int
type Double

type KronusFunction0[R] = Function0[Context[R]]
type KronusFunction1[P0,R] = Function1[Context[P0],Context[R]]
type KronusFunction2[P0,P1,R] = Function2[Context[P0],Context[P1],Context[R]]

def F0():Unit = generate("yield") { println("F0") }
def F1(p0:String):Unit = generate("yield") { println(s"F1(p0=$p0)") }
def F2(p0:String, p1:String):Unit = generate("yield") { println(s"F2(p0=$p0,p1=$p1)") }

val F0R = F0
val F1R = F1
val F2R = F2

def F0Caller[R](fn:KronusFunction0[R]):Unit = generate("yield") { fn() }
def F1Caller[P0,R](fn:KronusFunction1[P0,R], p0:P0):Unit = generate("yield") { fn(p0)}
def F2Caller[P0,P1,R](fn:KronusFunction2[P0,P1,R],p0:P0,p1:P1):Unit = generate("yield") { fn(p0,p1) }

val F0C0 = F0Caller(fn=F0R)
val F0C1 = F0Caller(fn=F0)

val F1C0 = F1Caller(fn=F1R, p0="P00")
val F1C1 = F1Caller(fn=F1, p0="P01")
val F2C0 = F2Caller(fn=F2R, p0="P00", p1="P10")
val F2C1 = F2Caller(fn=F2, p0="P01", p1="P11")
