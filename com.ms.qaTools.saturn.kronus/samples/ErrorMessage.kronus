package com.ms.qaTools.kronus.rfb.ErrorMessage

import scala.util.Try

include com.ms.qaTools.kronus.rfb.PRELUDE

def F1(n: Int): Int = {return n + 1}

def F2(n: Int): Int = {
  val X = n * 2
  return X
}

def G1(n: Int): Int = {return 1 / n}

def G2(n: Int): Int = {
  val X = 1 / n
  return X
}

val TEST_SIMPLE = {
  val SIMPLE = ASSERT(false)
  return generate("for") {
    SIMPLE.mapTry { t =>
      Try {
        val msg = t.failed.get.getMessage
        assert(msg.contains("TEST_SIMPLE.SIMPLE"))
        assert(msg.contains("line 22 to 22"))
      }
    }
  }
}

val TEST_FUNCTION_CALL = {
  val CALL1 = 1 + G1(0)
  val CALL2 = 42 + G2(0)
  val CALL3 = F1(G1(0))
  val CALL4 = F1(G2(0))
  return {
    val VALIDATE1 = generate("for") {
      CALL1.mapTry { t =>
        Try {
          val msg = t.failed.get.getCause.getMessage
          assert(msg.contains("TEST_FUNCTION_CALL.CALL1.(G1)"))
          assert(msg.contains("line 35 to 35"))
        }
      }
    }
    val VALIDATE2 = generate("for") {
      CALL2.mapTry { t =>
        Try {
          val exG2 = t.failed.get.getCause
          val exG2X = exG2.getCause
          assert(exG2.getMessage.contains("TEST_FUNCTION_CALL.CALL2.(G2)"))
          assert(exG2.getMessage.contains("line 36 to 36"))
          assert(exG2X.getMessage.contains("TEST_FUNCTION_CALL.CALL2.(G2).X"))
          assert(exG2X.getMessage.contains("line 17 to 17"))
        }
      }
    }
    val VALIDATE3 = generate("for") {
      CALL3.mapTry { t =>
        Try {
          val msg = t.failed.get.getCause.getCause.getCause.getMessage
          assert(msg.contains("TEST_FUNCTION_CALL.CALL3.(F1).n.(G1)"))
          assert(msg.contains("line 37 to 37"))
        }
      }
    }
    val VALIDATE4 = generate("for") {
      CALL4.mapTry { t =>
        Try {
          val msg = t.failed.get.getCause.getCause.getCause.getCause.getMessage
          assert(msg.contains("TEST_FUNCTION_CALL.CALL4.(F1).n.(G2).X"))
          assert(msg.contains("line 17 to 17"))
        }
      }
    }
  }
}

val TEST_INCLUDED_FUNCTION_CALL = {
  include com.ms.qaTools.kronus.rfb.PRELUDE as P
  val CALL = P.FAIL()
  return generate("for") {
    CALL.mapTry { t =>
      Try {
        val msg = t.failed.get.getCause.getMessage
        assert(msg.contains("TEST_INCLUDED_FUNCTION_CALL.CALL.(P.FAIL)"))
        assert(msg.contains("line 84 to 84"))
      }
    }
  }
}
/*
Copyright 2017 Morgan Stanley

Licensed under the GNU Lesser General Public License Version 3 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

https://www.gnu.org/licenses/lgpl-3.0.en.html

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

IN ADDITION, THE FOLLOWING DISCLAIMER APPLIES IN CONNECTION WITH THIS PROGRAM:

THIS SOFTWARE IS LICENSED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AND ANY
WARRANTY OF NON-INFRINGEMENT, ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
OF SUCH DAMAGE. THIS SOFTWARE MAY BE REDISTRIBUTED TO OTHERS ONLY BY EFFECTIVELY
USING THIS OR ANOTHER EQUIVALENT DISCLAIMER IN ADDITION TO ANY OTHER REQUIRED
LICENSE TERMS.
*/
